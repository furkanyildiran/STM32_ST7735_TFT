
ST7735_STM32F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000117c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08001288  08001288  00011288  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015c8  080015c8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080015c8  080015c8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015c8  080015c8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015c8  080015c8  000115c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015cc  080015cc  000115cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080015d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000018  080015e8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080015e8  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e55  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001791  00000000  00000000  00026e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000558  00000000  00000000  00028628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  00028b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015bda  00000000  00000000  00029300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007fc4  00000000  00000000  0003eeda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b91d  00000000  00000000  00046e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c27bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e34  00000000  00000000  000c280c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002fdb  00000000  00000000  000c3640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08001270 	.word	0x08001270

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08001270 	.word	0x08001270

0800014c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000150:	2220      	movs	r2, #32
 8000152:	2100      	movs	r1, #0
 8000154:	a807      	add	r0, sp, #28
 8000156:	f001 f883 	bl	8001260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800015a:	2214      	movs	r2, #20
 800015c:	2100      	movs	r1, #0
 800015e:	a801      	add	r0, sp, #4
 8000160:	f001 f87e 	bl	8001260 <memset>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000164:	2310      	movs	r3, #16
 8000166:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000168:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800016a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800016e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000172:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000174:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000176:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000178:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800017a:	f000 fadd 	bl	8000738 <HAL_RCC_OscConfig>
 800017e:	b108      	cbz	r0, 8000184 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000180:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000182:	e7fe      	b.n	8000182 <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000184:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000186:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800018a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800018e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000190:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000194:	4621      	mov	r1, r4
 8000196:	a801      	add	r0, sp, #4
 8000198:	f000 fca4 	bl	8000ae4 <HAL_RCC_ClockConfig>
 800019c:	b108      	cbz	r0, 80001a2 <SystemClock_Config+0x56>
 800019e:	b672      	cpsid	i
  while (1)
 80001a0:	e7fe      	b.n	80001a0 <SystemClock_Config+0x54>
}
 80001a2:	b010      	add	sp, #64	; 0x40
 80001a4:	bd10      	pop	{r4, pc}
	...

080001a8 <main>:
{
 80001a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001aa:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80001ac:	f000 f95a 	bl	8000464 <HAL_Init>
  SystemClock_Config();
 80001b0:	f7ff ffcc 	bl	800014c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001b4:	2210      	movs	r2, #16
 80001b6:	2100      	movs	r1, #0
 80001b8:	eb0d 0002 	add.w	r0, sp, r2
 80001bc:	f001 f850 	bl	8001260 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001c0:	4b53      	ldr	r3, [pc, #332]	; (8000310 <main+0x168>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001c6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001c8:	4852      	ldr	r0, [pc, #328]	; (8000314 <main+0x16c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ca:	f042 0210 	orr.w	r2, r2, #16
 80001ce:	619a      	str	r2, [r3, #24]
 80001d0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d2:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001d4:	f002 0210 	and.w	r2, r2, #16
 80001d8:	9202      	str	r2, [sp, #8]
 80001da:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001dc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001de:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001e0:	f042 0204 	orr.w	r2, r2, #4
 80001e4:	619a      	str	r2, [r3, #24]
 80001e6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ea:	f003 0304 	and.w	r3, r3, #4
 80001ee:	9303      	str	r3, [sp, #12]
 80001f0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001f2:	f000 fa9b 	bl	800072c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80001f6:	2200      	movs	r2, #0
 80001f8:	210e      	movs	r1, #14
 80001fa:	4847      	ldr	r0, [pc, #284]	; (8000318 <main+0x170>)
 80001fc:	f000 fa96 	bl	800072c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000200:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000206:	4843      	ldr	r0, [pc, #268]	; (8000314 <main+0x16c>)
 8000208:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800020a:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800020e:	e9cd 5706 	strd	r5, r7, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000212:	f000 f9b5 	bl	8000580 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000216:	230e      	movs	r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000218:	483f      	ldr	r0, [pc, #252]	; (8000318 <main+0x170>)
 800021a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800021c:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000220:	e9cd 5706 	strd	r5, r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000224:	f000 f9ac 	bl	8000580 <HAL_GPIO_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000228:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 800022c:	4c3b      	ldr	r4, [pc, #236]	; (800031c <main+0x174>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800022e:	4a3c      	ldr	r2, [pc, #240]	; (8000320 <main+0x178>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000230:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000234:	e9c4 2300 	strd	r2, r3, [r4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800023c:	e9c4 3502 	strd	r3, r5, [r4, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000240:	2308      	movs	r3, #8
 8000242:	e9c4 1306 	strd	r1, r3, [r4, #24]
  hspi1.Init.CRCPolynomial = 10;
 8000246:	230a      	movs	r3, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000248:	4620      	mov	r0, r4
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800024a:	e9c4 5508 	strd	r5, r5, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800024e:	62a5      	str	r5, [r4, #40]	; 0x28
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000250:	e9c4 7604 	strd	r7, r6, [r4, #16]
  hspi1.Init.CRCPolynomial = 10;
 8000254:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000256:	f000 fd45 	bl	8000ce4 <HAL_SPI_Init>
 800025a:	4605      	mov	r5, r0
 800025c:	b108      	cbz	r0, 8000262 <main+0xba>
 800025e:	b672      	cpsid	i
  while (1)
 8000260:	e7fe      	b.n	8000260 <main+0xb8>
  ST7735_TFT_init(&hspi1);
 8000262:	4620      	mov	r0, r4
 8000264:	f000 fedc 	bl	8001020 <ST7735_TFT_init>
  ST7735_TFT_fillScreen(BLUE);
 8000268:	201f      	movs	r0, #31
 800026a:	f000 ff4b 	bl	8001104 <ST7735_TFT_fillScreen>
	  ST7735_TFT_writeString(buff, 0, 50, YELLOW, BLUE);
 800026e:	4c2d      	ldr	r4, [pc, #180]	; (8000324 <main+0x17c>)
	  ST7735_TFT_fillScreen(BLUE);
 8000270:	201f      	movs	r0, #31
 8000272:	f000 ff47 	bl	8001104 <ST7735_TFT_fillScreen>
	  ST7735_TFT_setOrientation(VERTICAL);
 8000276:	2000      	movs	r0, #0
 8000278:	f000 ff10 	bl	800109c <ST7735_TFT_setOrientation>
	  ST7735_TFT_writeString(buff, 0, 50, YELLOW, BLUE);
 800027c:	231f      	movs	r3, #31
 800027e:	2232      	movs	r2, #50	; 0x32
 8000280:	2100      	movs	r1, #0
 8000282:	4620      	mov	r0, r4
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800028a:	f000 ff9f 	bl	80011cc <ST7735_TFT_writeString>
	  HAL_Delay(3000);
 800028e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000292:	f000 f90b 	bl	80004ac <HAL_Delay>
	  ST7735_TFT_fillScreen(BLACK);
 8000296:	2000      	movs	r0, #0
 8000298:	f000 ff34 	bl	8001104 <ST7735_TFT_fillScreen>
	  ST7735_TFT_setOrientation(LANDSCAPE);
 800029c:	2002      	movs	r0, #2
 800029e:	f000 fefd 	bl	800109c <ST7735_TFT_setOrientation>
	  ST7735_TFT_writeString(buff, 0, 50, WHITE, BLACK);
 80002a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002a6:	2232      	movs	r2, #50	; 0x32
 80002a8:	2100      	movs	r1, #0
 80002aa:	4620      	mov	r0, r4
 80002ac:	9500      	str	r5, [sp, #0]
 80002ae:	f000 ff8d 	bl	80011cc <ST7735_TFT_writeString>
	  HAL_Delay(3000);
 80002b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80002b6:	f000 f8f9 	bl	80004ac <HAL_Delay>
	  ST7735_TFT_fillScreen(ORANGE);
 80002ba:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
 80002be:	f000 ff21 	bl	8001104 <ST7735_TFT_fillScreen>
	  ST7735_TFT_setOrientation(TURN180_DEGREES);
 80002c2:	2001      	movs	r0, #1
 80002c4:	f000 feea 	bl	800109c <ST7735_TFT_setOrientation>
	  ST7735_TFT_writeString(buff, 0, 50, RED, ORANGE);
 80002c8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80002cc:	2232      	movs	r2, #50	; 0x32
 80002ce:	2100      	movs	r1, #0
 80002d0:	4620      	mov	r0, r4
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80002d8:	f000 ff78 	bl	80011cc <ST7735_TFT_writeString>
	  HAL_Delay(3000);
 80002dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80002e0:	f000 f8e4 	bl	80004ac <HAL_Delay>
	  ST7735_TFT_fillScreen(GREEN);
 80002e4:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80002e8:	f000 ff0c 	bl	8001104 <ST7735_TFT_fillScreen>
	  ST7735_TFT_setOrientation(TURN270_DEGREES);
 80002ec:	2003      	movs	r0, #3
 80002ee:	f000 fed5 	bl	800109c <ST7735_TFT_setOrientation>
	  ST7735_TFT_writeString(buff, 0, 50, BLACK, GREEN);
 80002f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	2300      	movs	r3, #0
 80002fa:	4620      	mov	r0, r4
 80002fc:	2232      	movs	r2, #50	; 0x32
 80002fe:	4619      	mov	r1, r3
 8000300:	f000 ff64 	bl	80011cc <ST7735_TFT_writeString>
	  HAL_Delay(3000);
 8000304:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000308:	f000 f8d0 	bl	80004ac <HAL_Delay>
  while(1){
 800030c:	e7b0      	b.n	8000270 <main+0xc8>
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000
 8000314:	40011000 	.word	0x40011000
 8000318:	40010800 	.word	0x40010800
 800031c:	20000034 	.word	0x20000034
 8000320:	40013000 	.word	0x40013000
 8000324:	08001288 	.word	0x08001288

08000328 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <HAL_MspInit+0x2c>)
{
 800032a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800032c:	699a      	ldr	r2, [r3, #24]
 800032e:	f042 0201 	orr.w	r2, r2, #1
 8000332:	619a      	str	r2, [r3, #24]
 8000334:	699a      	ldr	r2, [r3, #24]
 8000336:	f002 0201 	and.w	r2, r2, #1
 800033a:	9200      	str	r2, [sp, #0]
 800033c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800033e:	69da      	ldr	r2, [r3, #28]
 8000340:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000344:	61da      	str	r2, [r3, #28]
 8000346:	69db      	ldr	r3, [r3, #28]
 8000348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000350:	b002      	add	sp, #8
 8000352:	4770      	bx	lr
 8000354:	40021000 	.word	0x40021000

08000358 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000358:	b510      	push	{r4, lr}
 800035a:	4604      	mov	r4, r0
 800035c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	2210      	movs	r2, #16
 8000360:	2100      	movs	r1, #0
 8000362:	a802      	add	r0, sp, #8
 8000364:	f000 ff7c 	bl	8001260 <memset>
  if(hspi->Instance==SPI1)
 8000368:	6822      	ldr	r2, [r4, #0]
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <HAL_SPI_MspInit+0x58>)
 800036c:	429a      	cmp	r2, r3
 800036e:	d11d      	bne.n	80003ac <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000370:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8000374:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000376:	480f      	ldr	r0, [pc, #60]	; (80003b4 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000378:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800037c:	619a      	str	r2, [r3, #24]
 800037e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000380:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000382:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800038a:	699a      	ldr	r2, [r3, #24]
 800038c:	f042 0204 	orr.w	r2, r2, #4
 8000390:	619a      	str	r2, [r3, #24]
 8000392:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000394:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000396:	f003 0304 	and.w	r3, r3, #4
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800039e:	2302      	movs	r3, #2
 80003a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003a4:	2303      	movs	r3, #3
 80003a6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a8:	f000 f8ea 	bl	8000580 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80003ac:	b006      	add	sp, #24
 80003ae:	bd10      	pop	{r4, pc}
 80003b0:	40013000 	.word	0x40013000
 80003b4:	40010800 	.word	0x40010800

080003b8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <NMI_Handler>

080003ba <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ba:	e7fe      	b.n	80003ba <HardFault_Handler>

080003bc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003bc:	e7fe      	b.n	80003bc <MemManage_Handler>

080003be <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003be:	e7fe      	b.n	80003be <BusFault_Handler>

080003c0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c0:	e7fe      	b.n	80003c0 <UsageFault_Handler>

080003c2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003c2:	4770      	bx	lr

080003c4 <DebugMon_Handler>:
 80003c4:	4770      	bx	lr

080003c6 <PendSV_Handler>:
 80003c6:	4770      	bx	lr

080003c8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003c8:	f000 b85e 	b.w	8000488 <HAL_IncTick>

080003cc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003cc:	4770      	bx	lr
	...

080003d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d0:	480c      	ldr	r0, [pc, #48]	; (8000404 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003d2:	490d      	ldr	r1, [pc, #52]	; (8000408 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003d4:	4a0d      	ldr	r2, [pc, #52]	; (800040c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d8:	e002      	b.n	80003e0 <LoopCopyDataInit>

080003da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003de:	3304      	adds	r3, #4

080003e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e4:	d3f9      	bcc.n	80003da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e6:	4a0a      	ldr	r2, [pc, #40]	; (8000410 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003e8:	4c0a      	ldr	r4, [pc, #40]	; (8000414 <LoopFillZerobss+0x22>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ec:	e001      	b.n	80003f2 <LoopFillZerobss>

080003ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f0:	3204      	adds	r2, #4

080003f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f4:	d3fb      	bcc.n	80003ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80003f6:	f7ff ffe9 	bl	80003cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003fa:	f000 ff0d 	bl	8001218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003fe:	f7ff fed3 	bl	80001a8 <main>
  bx lr
 8000402:	4770      	bx	lr
  ldr r0, =_sdata
 8000404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000408:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800040c:	080015d0 	.word	0x080015d0
  ldr r2, =_sbss
 8000410:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000414:	20000098 	.word	0x20000098

08000418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000418:	e7fe      	b.n	8000418 <ADC1_2_IRQHandler>
	...

0800041c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800041c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <HAL_InitTick+0x3c>)
{
 8000420:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000422:	7818      	ldrb	r0, [r3, #0]
 8000424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000428:	fbb3 f3f0 	udiv	r3, r3, r0
 800042c:	4a0b      	ldr	r2, [pc, #44]	; (800045c <HAL_InitTick+0x40>)
 800042e:	6810      	ldr	r0, [r2, #0]
 8000430:	fbb0 f0f3 	udiv	r0, r0, r3
 8000434:	f000 f890 	bl	8000558 <HAL_SYSTICK_Config>
 8000438:	4604      	mov	r4, r0
 800043a:	b958      	cbnz	r0, 8000454 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800043c:	2d0f      	cmp	r5, #15
 800043e:	d809      	bhi.n	8000454 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000440:	4602      	mov	r2, r0
 8000442:	4629      	mov	r1, r5
 8000444:	f04f 30ff 	mov.w	r0, #4294967295
 8000448:	f000 f854 	bl	80004f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800044c:	4620      	mov	r0, r4
 800044e:	4b04      	ldr	r3, [pc, #16]	; (8000460 <HAL_InitTick+0x44>)
 8000450:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000452:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000454:	2001      	movs	r0, #1
 8000456:	e7fc      	b.n	8000452 <HAL_InitTick+0x36>
 8000458:	20000004 	.word	0x20000004
 800045c:	20000000 	.word	0x20000000
 8000460:	20000008 	.word	0x20000008

08000464 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000464:	4a07      	ldr	r2, [pc, #28]	; (8000484 <HAL_Init+0x20>)
{
 8000466:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000468:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800046a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800046c:	f043 0310 	orr.w	r3, r3, #16
 8000470:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000472:	f000 f82d 	bl	80004d0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000476:	200f      	movs	r0, #15
 8000478:	f7ff ffd0 	bl	800041c <HAL_InitTick>
  HAL_MspInit();
 800047c:	f7ff ff54 	bl	8000328 <HAL_MspInit>
}
 8000480:	2000      	movs	r0, #0
 8000482:	bd08      	pop	{r3, pc}
 8000484:	40022000 	.word	0x40022000

08000488 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000488:	4a03      	ldr	r2, [pc, #12]	; (8000498 <HAL_IncTick+0x10>)
 800048a:	4b04      	ldr	r3, [pc, #16]	; (800049c <HAL_IncTick+0x14>)
 800048c:	6811      	ldr	r1, [r2, #0]
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	440b      	add	r3, r1
 8000492:	6013      	str	r3, [r2, #0]
}
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	2000008c 	.word	0x2000008c
 800049c:	20000004 	.word	0x20000004

080004a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004a0:	4b01      	ldr	r3, [pc, #4]	; (80004a8 <HAL_GetTick+0x8>)
 80004a2:	6818      	ldr	r0, [r3, #0]
}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	2000008c 	.word	0x2000008c

080004ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004ac:	b538      	push	{r3, r4, r5, lr}
 80004ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004b0:	f7ff fff6 	bl	80004a0 <HAL_GetTick>
 80004b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004b6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80004b8:	bf1e      	ittt	ne
 80004ba:	4b04      	ldrne	r3, [pc, #16]	; (80004cc <HAL_Delay+0x20>)
 80004bc:	781b      	ldrbne	r3, [r3, #0]
 80004be:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004c0:	f7ff ffee 	bl	80004a0 <HAL_GetTick>
 80004c4:	1b43      	subs	r3, r0, r5
 80004c6:	42a3      	cmp	r3, r4
 80004c8:	d3fa      	bcc.n	80004c0 <HAL_Delay+0x14>
  {
  }
}
 80004ca:	bd38      	pop	{r3, r4, r5, pc}
 80004cc:	20000004 	.word	0x20000004

080004d0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004d0:	4907      	ldr	r1, [pc, #28]	; (80004f0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004d2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004d4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80004de:	0412      	lsls	r2, r2, #16
 80004e0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80004ec:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80004ee:	4770      	bx	lr
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	68dc      	ldr	r4, [r3, #12]
 80004fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004fe:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000502:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000504:	2b04      	cmp	r3, #4
 8000506:	bf28      	it	cs
 8000508:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800050a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800050c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000510:	bf98      	it	ls
 8000512:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000514:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000518:	bf88      	it	hi
 800051a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800051c:	ea21 0303 	bic.w	r3, r1, r3
 8000520:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000522:	fa05 f404 	lsl.w	r4, r5, r4
 8000526:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800052a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800052c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000530:	bfac      	ite	ge
 8000532:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000536:	4a07      	ldrlt	r2, [pc, #28]	; (8000554 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000538:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800053c:	b2db      	uxtb	r3, r3
 800053e:	bfab      	itete	ge
 8000540:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000544:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000548:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800054e:	bd30      	pop	{r4, r5, pc}
 8000550:	e000ed00 	.word	0xe000ed00
 8000554:	e000ed14 	.word	0xe000ed14

08000558 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000558:	3801      	subs	r0, #1
 800055a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800055e:	d20b      	bcs.n	8000578 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000560:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000564:	21f0      	movs	r1, #240	; 0xf0
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000568:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800056e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000570:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000572:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000574:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000576:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000578:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800057a:	4770      	bx	lr
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000584:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000586:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000588:	4f61      	ldr	r7, [pc, #388]	; (8000710 <HAL_GPIO_Init+0x190>)
 800058a:	4b62      	ldr	r3, [pc, #392]	; (8000714 <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 800058c:	f8df c188 	ldr.w	ip, [pc, #392]	; 8000718 <HAL_GPIO_Init+0x198>
 8000590:	f8df e188 	ldr.w	lr, [pc, #392]	; 800071c <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000594:	680d      	ldr	r5, [r1, #0]
 8000596:	fa35 f406 	lsrs.w	r4, r5, r6
 800059a:	d102      	bne.n	80005a2 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 800059c:	b003      	add	sp, #12
 800059e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80005a2:	f04f 0801 	mov.w	r8, #1
 80005a6:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005aa:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80005ae:	ea38 0505 	bics.w	r5, r8, r5
 80005b2:	d177      	bne.n	80006a4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80005b4:	684d      	ldr	r5, [r1, #4]
 80005b6:	2d03      	cmp	r5, #3
 80005b8:	d807      	bhi.n	80005ca <HAL_GPIO_Init+0x4a>
 80005ba:	3d01      	subs	r5, #1
 80005bc:	2d02      	cmp	r5, #2
 80005be:	f200 8082 	bhi.w	80006c6 <HAL_GPIO_Init+0x146>
 80005c2:	e8df f005 	tbb	[pc, r5]
 80005c6:	9792      	.short	0x9792
 80005c8:	9d          	.byte	0x9d
 80005c9:	00          	.byte	0x00
 80005ca:	2d12      	cmp	r5, #18
 80005cc:	f000 8095 	beq.w	80006fa <HAL_GPIO_Init+0x17a>
 80005d0:	d86a      	bhi.n	80006a8 <HAL_GPIO_Init+0x128>
 80005d2:	2d11      	cmp	r5, #17
 80005d4:	f000 808b 	beq.w	80006ee <HAL_GPIO_Init+0x16e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005d8:	2cff      	cmp	r4, #255	; 0xff
 80005da:	bf98      	it	ls
 80005dc:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005de:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005e2:	bf88      	it	hi
 80005e4:	f100 0a04 	addhi.w	sl, r0, #4
 80005e8:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005ec:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80005f0:	bf88      	it	hi
 80005f2:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005f4:	fa09 fb05 	lsl.w	fp, r9, r5
 80005f8:	ea28 080b 	bic.w	r8, r8, fp
 80005fc:	fa02 f505 	lsl.w	r5, r2, r5
 8000600:	ea48 0505 	orr.w	r5, r8, r5
 8000604:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000608:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800060c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000610:	d048      	beq.n	80006a4 <HAL_GPIO_Init+0x124>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000612:	69bd      	ldr	r5, [r7, #24]
 8000614:	f026 0803 	bic.w	r8, r6, #3
 8000618:	f045 0501 	orr.w	r5, r5, #1
 800061c:	61bd      	str	r5, [r7, #24]
 800061e:	69bd      	ldr	r5, [r7, #24]
 8000620:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000624:	f005 0501 	and.w	r5, r5, #1
 8000628:	9501      	str	r5, [sp, #4]
 800062a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800062e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000632:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000634:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000638:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800063c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000640:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000644:	4d36      	ldr	r5, [pc, #216]	; (8000720 <HAL_GPIO_Init+0x1a0>)
 8000646:	42a8      	cmp	r0, r5
 8000648:	d05e      	beq.n	8000708 <HAL_GPIO_Init+0x188>
 800064a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800064e:	42a8      	cmp	r0, r5
 8000650:	d05c      	beq.n	800070c <HAL_GPIO_Init+0x18c>
 8000652:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000656:	42a8      	cmp	r0, r5
 8000658:	bf0c      	ite	eq
 800065a:	2502      	moveq	r5, #2
 800065c:	2503      	movne	r5, #3
 800065e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000662:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000666:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800066a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800066c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000670:	bf14      	ite	ne
 8000672:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000674:	43a5      	biceq	r5, r4
 8000676:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000678:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800067a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800067e:	bf14      	ite	ne
 8000680:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000682:	43a5      	biceq	r5, r4
 8000684:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000686:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000688:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800068c:	bf14      	ite	ne
 800068e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000690:	43a5      	biceq	r5, r4
 8000692:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000694:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000696:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800069a:	bf14      	ite	ne
 800069c:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800069e:	ea25 0404 	biceq.w	r4, r5, r4
 80006a2:	60dc      	str	r4, [r3, #12]
	position++;
 80006a4:	3601      	adds	r6, #1
 80006a6:	e775      	b.n	8000594 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80006a8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000724 <HAL_GPIO_Init+0x1a4>
 80006ac:	454d      	cmp	r5, r9
 80006ae:	d00a      	beq.n	80006c6 <HAL_GPIO_Init+0x146>
 80006b0:	d815      	bhi.n	80006de <HAL_GPIO_Init+0x15e>
 80006b2:	4575      	cmp	r5, lr
 80006b4:	d007      	beq.n	80006c6 <HAL_GPIO_Init+0x146>
 80006b6:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 80006ba:	454d      	cmp	r5, r9
 80006bc:	d003      	beq.n	80006c6 <HAL_GPIO_Init+0x146>
 80006be:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80006c2:	454d      	cmp	r5, r9
 80006c4:	d188      	bne.n	80005d8 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80006c6:	688a      	ldr	r2, [r1, #8]
 80006c8:	b1e2      	cbz	r2, 8000704 <HAL_GPIO_Init+0x184>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80006ca:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80006cc:	bf08      	it	eq
 80006ce:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006d2:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80006d6:	bf18      	it	ne
 80006d8:	f8c0 8014 	strne.w	r8, [r0, #20]
 80006dc:	e77c      	b.n	80005d8 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80006de:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8000728 <HAL_GPIO_Init+0x1a8>
 80006e2:	454d      	cmp	r5, r9
 80006e4:	d0ef      	beq.n	80006c6 <HAL_GPIO_Init+0x146>
 80006e6:	4565      	cmp	r5, ip
 80006e8:	e7ec      	b.n	80006c4 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80006ea:	68ca      	ldr	r2, [r1, #12]
          break;
 80006ec:	e774      	b.n	80005d8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80006ee:	68ca      	ldr	r2, [r1, #12]
 80006f0:	3204      	adds	r2, #4
          break;
 80006f2:	e771      	b.n	80005d8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006f4:	68ca      	ldr	r2, [r1, #12]
 80006f6:	3208      	adds	r2, #8
          break;
 80006f8:	e76e      	b.n	80005d8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006fa:	68ca      	ldr	r2, [r1, #12]
 80006fc:	320c      	adds	r2, #12
          break;
 80006fe:	e76b      	b.n	80005d8 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8000700:	2200      	movs	r2, #0
 8000702:	e769      	b.n	80005d8 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000704:	2204      	movs	r2, #4
 8000706:	e767      	b.n	80005d8 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000708:	2500      	movs	r5, #0
 800070a:	e7a8      	b.n	800065e <HAL_GPIO_Init+0xde>
 800070c:	2501      	movs	r5, #1
 800070e:	e7a6      	b.n	800065e <HAL_GPIO_Init+0xde>
 8000710:	40021000 	.word	0x40021000
 8000714:	40010400 	.word	0x40010400
 8000718:	10320000 	.word	0x10320000
 800071c:	10120000 	.word	0x10120000
 8000720:	40010800 	.word	0x40010800
 8000724:	10220000 	.word	0x10220000
 8000728:	10310000 	.word	0x10310000

0800072c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800072c:	b10a      	cbz	r2, 8000732 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800072e:	6101      	str	r1, [r0, #16]
  }
}
 8000730:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000732:	0409      	lsls	r1, r1, #16
 8000734:	e7fb      	b.n	800072e <HAL_GPIO_WritePin+0x2>
	...

08000738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000738:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800073c:	4605      	mov	r5, r0
 800073e:	b338      	cbz	r0, 8000790 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000740:	6803      	ldr	r3, [r0, #0]
 8000742:	07db      	lsls	r3, r3, #31
 8000744:	d410      	bmi.n	8000768 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000746:	682b      	ldr	r3, [r5, #0]
 8000748:	079f      	lsls	r7, r3, #30
 800074a:	d45e      	bmi.n	800080a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800074c:	682b      	ldr	r3, [r5, #0]
 800074e:	0719      	lsls	r1, r3, #28
 8000750:	f100 8095 	bmi.w	800087e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000754:	682b      	ldr	r3, [r5, #0]
 8000756:	075a      	lsls	r2, r3, #29
 8000758:	f100 80c1 	bmi.w	80008de <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800075c:	69e8      	ldr	r0, [r5, #28]
 800075e:	2800      	cmp	r0, #0
 8000760:	f040 812c 	bne.w	80009bc <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8000764:	2000      	movs	r0, #0
 8000766:	e029      	b.n	80007bc <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000768:	4c90      	ldr	r4, [pc, #576]	; (80009ac <HAL_RCC_OscConfig+0x274>)
 800076a:	6863      	ldr	r3, [r4, #4]
 800076c:	f003 030c 	and.w	r3, r3, #12
 8000770:	2b04      	cmp	r3, #4
 8000772:	d007      	beq.n	8000784 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000774:	6863      	ldr	r3, [r4, #4]
 8000776:	f003 030c 	and.w	r3, r3, #12
 800077a:	2b08      	cmp	r3, #8
 800077c:	d10a      	bne.n	8000794 <HAL_RCC_OscConfig+0x5c>
 800077e:	6863      	ldr	r3, [r4, #4]
 8000780:	03de      	lsls	r6, r3, #15
 8000782:	d507      	bpl.n	8000794 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000784:	6823      	ldr	r3, [r4, #0]
 8000786:	039c      	lsls	r4, r3, #14
 8000788:	d5dd      	bpl.n	8000746 <HAL_RCC_OscConfig+0xe>
 800078a:	686b      	ldr	r3, [r5, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d1da      	bne.n	8000746 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000790:	2001      	movs	r0, #1
 8000792:	e013      	b.n	80007bc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000794:	686b      	ldr	r3, [r5, #4]
 8000796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800079a:	d112      	bne.n	80007c2 <HAL_RCC_OscConfig+0x8a>
 800079c:	6823      	ldr	r3, [r4, #0]
 800079e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007a2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007a4:	f7ff fe7c 	bl	80004a0 <HAL_GetTick>
 80007a8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007aa:	6823      	ldr	r3, [r4, #0]
 80007ac:	0398      	lsls	r0, r3, #14
 80007ae:	d4ca      	bmi.n	8000746 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007b0:	f7ff fe76 	bl	80004a0 <HAL_GetTick>
 80007b4:	1b80      	subs	r0, r0, r6
 80007b6:	2864      	cmp	r0, #100	; 0x64
 80007b8:	d9f7      	bls.n	80007aa <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80007ba:	2003      	movs	r0, #3
}
 80007bc:	b002      	add	sp, #8
 80007be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007c2:	b99b      	cbnz	r3, 80007ec <HAL_RCC_OscConfig+0xb4>
 80007c4:	6823      	ldr	r3, [r4, #0]
 80007c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ca:	6023      	str	r3, [r4, #0]
 80007cc:	6823      	ldr	r3, [r4, #0]
 80007ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007d2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007d4:	f7ff fe64 	bl	80004a0 <HAL_GetTick>
 80007d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007da:	6823      	ldr	r3, [r4, #0]
 80007dc:	0399      	lsls	r1, r3, #14
 80007de:	d5b2      	bpl.n	8000746 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80007e0:	f7ff fe5e 	bl	80004a0 <HAL_GetTick>
 80007e4:	1b80      	subs	r0, r0, r6
 80007e6:	2864      	cmp	r0, #100	; 0x64
 80007e8:	d9f7      	bls.n	80007da <HAL_RCC_OscConfig+0xa2>
 80007ea:	e7e6      	b.n	80007ba <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	d103      	bne.n	80007fc <HAL_RCC_OscConfig+0xc4>
 80007f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f8:	6023      	str	r3, [r4, #0]
 80007fa:	e7cf      	b.n	800079c <HAL_RCC_OscConfig+0x64>
 80007fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000800:	6023      	str	r3, [r4, #0]
 8000802:	6823      	ldr	r3, [r4, #0]
 8000804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000808:	e7cb      	b.n	80007a2 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800080a:	4c68      	ldr	r4, [pc, #416]	; (80009ac <HAL_RCC_OscConfig+0x274>)
 800080c:	6863      	ldr	r3, [r4, #4]
 800080e:	f013 0f0c 	tst.w	r3, #12
 8000812:	d007      	beq.n	8000824 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000814:	6863      	ldr	r3, [r4, #4]
 8000816:	f003 030c 	and.w	r3, r3, #12
 800081a:	2b08      	cmp	r3, #8
 800081c:	d110      	bne.n	8000840 <HAL_RCC_OscConfig+0x108>
 800081e:	6863      	ldr	r3, [r4, #4]
 8000820:	03da      	lsls	r2, r3, #15
 8000822:	d40d      	bmi.n	8000840 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000824:	6823      	ldr	r3, [r4, #0]
 8000826:	079b      	lsls	r3, r3, #30
 8000828:	d502      	bpl.n	8000830 <HAL_RCC_OscConfig+0xf8>
 800082a:	692b      	ldr	r3, [r5, #16]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d1af      	bne.n	8000790 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000830:	6823      	ldr	r3, [r4, #0]
 8000832:	696a      	ldr	r2, [r5, #20]
 8000834:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000838:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800083c:	6023      	str	r3, [r4, #0]
 800083e:	e785      	b.n	800074c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000840:	692a      	ldr	r2, [r5, #16]
 8000842:	4b5b      	ldr	r3, [pc, #364]	; (80009b0 <HAL_RCC_OscConfig+0x278>)
 8000844:	b16a      	cbz	r2, 8000862 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8000846:	2201      	movs	r2, #1
 8000848:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800084a:	f7ff fe29 	bl	80004a0 <HAL_GetTick>
 800084e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	079f      	lsls	r7, r3, #30
 8000854:	d4ec      	bmi.n	8000830 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000856:	f7ff fe23 	bl	80004a0 <HAL_GetTick>
 800085a:	1b80      	subs	r0, r0, r6
 800085c:	2802      	cmp	r0, #2
 800085e:	d9f7      	bls.n	8000850 <HAL_RCC_OscConfig+0x118>
 8000860:	e7ab      	b.n	80007ba <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8000862:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000864:	f7ff fe1c 	bl	80004a0 <HAL_GetTick>
 8000868:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800086a:	6823      	ldr	r3, [r4, #0]
 800086c:	0798      	lsls	r0, r3, #30
 800086e:	f57f af6d 	bpl.w	800074c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000872:	f7ff fe15 	bl	80004a0 <HAL_GetTick>
 8000876:	1b80      	subs	r0, r0, r6
 8000878:	2802      	cmp	r0, #2
 800087a:	d9f6      	bls.n	800086a <HAL_RCC_OscConfig+0x132>
 800087c:	e79d      	b.n	80007ba <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800087e:	69aa      	ldr	r2, [r5, #24]
 8000880:	4e4a      	ldr	r6, [pc, #296]	; (80009ac <HAL_RCC_OscConfig+0x274>)
 8000882:	4b4b      	ldr	r3, [pc, #300]	; (80009b0 <HAL_RCC_OscConfig+0x278>)
 8000884:	b1e2      	cbz	r2, 80008c0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000886:	2201      	movs	r2, #1
 8000888:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800088c:	f7ff fe08 	bl	80004a0 <HAL_GetTick>
 8000890:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000892:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000894:	079b      	lsls	r3, r3, #30
 8000896:	d50d      	bpl.n	80008b4 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000898:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800089c:	4b45      	ldr	r3, [pc, #276]	; (80009b4 <HAL_RCC_OscConfig+0x27c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80008a4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80008a6:	bf00      	nop
  }
  while (Delay --);
 80008a8:	9b01      	ldr	r3, [sp, #4]
 80008aa:	1e5a      	subs	r2, r3, #1
 80008ac:	9201      	str	r2, [sp, #4]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1f9      	bne.n	80008a6 <HAL_RCC_OscConfig+0x16e>
 80008b2:	e74f      	b.n	8000754 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80008b4:	f7ff fdf4 	bl	80004a0 <HAL_GetTick>
 80008b8:	1b00      	subs	r0, r0, r4
 80008ba:	2802      	cmp	r0, #2
 80008bc:	d9e9      	bls.n	8000892 <HAL_RCC_OscConfig+0x15a>
 80008be:	e77c      	b.n	80007ba <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80008c0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80008c4:	f7ff fdec 	bl	80004a0 <HAL_GetTick>
 80008c8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80008cc:	079f      	lsls	r7, r3, #30
 80008ce:	f57f af41 	bpl.w	8000754 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80008d2:	f7ff fde5 	bl	80004a0 <HAL_GetTick>
 80008d6:	1b00      	subs	r0, r0, r4
 80008d8:	2802      	cmp	r0, #2
 80008da:	d9f6      	bls.n	80008ca <HAL_RCC_OscConfig+0x192>
 80008dc:	e76d      	b.n	80007ba <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008de:	4c33      	ldr	r4, [pc, #204]	; (80009ac <HAL_RCC_OscConfig+0x274>)
 80008e0:	69e3      	ldr	r3, [r4, #28]
 80008e2:	00d8      	lsls	r0, r3, #3
 80008e4:	d424      	bmi.n	8000930 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80008e6:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80008e8:	69e3      	ldr	r3, [r4, #28]
 80008ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ee:	61e3      	str	r3, [r4, #28]
 80008f0:	69e3      	ldr	r3, [r4, #28]
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008fa:	4e2f      	ldr	r6, [pc, #188]	; (80009b8 <HAL_RCC_OscConfig+0x280>)
 80008fc:	6833      	ldr	r3, [r6, #0]
 80008fe:	05d9      	lsls	r1, r3, #23
 8000900:	d518      	bpl.n	8000934 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000902:	68eb      	ldr	r3, [r5, #12]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d126      	bne.n	8000956 <HAL_RCC_OscConfig+0x21e>
 8000908:	6a23      	ldr	r3, [r4, #32]
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000910:	f7ff fdc6 	bl	80004a0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000914:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000918:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800091a:	6a23      	ldr	r3, [r4, #32]
 800091c:	079b      	lsls	r3, r3, #30
 800091e:	d53f      	bpl.n	80009a0 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8000920:	2f00      	cmp	r7, #0
 8000922:	f43f af1b 	beq.w	800075c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000926:	69e3      	ldr	r3, [r4, #28]
 8000928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800092c:	61e3      	str	r3, [r4, #28]
 800092e:	e715      	b.n	800075c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000930:	2700      	movs	r7, #0
 8000932:	e7e2      	b.n	80008fa <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000934:	6833      	ldr	r3, [r6, #0]
 8000936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800093c:	f7ff fdb0 	bl	80004a0 <HAL_GetTick>
 8000940:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000942:	6833      	ldr	r3, [r6, #0]
 8000944:	05da      	lsls	r2, r3, #23
 8000946:	d4dc      	bmi.n	8000902 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000948:	f7ff fdaa 	bl	80004a0 <HAL_GetTick>
 800094c:	eba0 0008 	sub.w	r0, r0, r8
 8000950:	2864      	cmp	r0, #100	; 0x64
 8000952:	d9f6      	bls.n	8000942 <HAL_RCC_OscConfig+0x20a>
 8000954:	e731      	b.n	80007ba <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000956:	b9ab      	cbnz	r3, 8000984 <HAL_RCC_OscConfig+0x24c>
 8000958:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800095a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800095e:	f023 0301 	bic.w	r3, r3, #1
 8000962:	6223      	str	r3, [r4, #32]
 8000964:	6a23      	ldr	r3, [r4, #32]
 8000966:	f023 0304 	bic.w	r3, r3, #4
 800096a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800096c:	f7ff fd98 	bl	80004a0 <HAL_GetTick>
 8000970:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000972:	6a23      	ldr	r3, [r4, #32]
 8000974:	0798      	lsls	r0, r3, #30
 8000976:	d5d3      	bpl.n	8000920 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000978:	f7ff fd92 	bl	80004a0 <HAL_GetTick>
 800097c:	1b80      	subs	r0, r0, r6
 800097e:	4540      	cmp	r0, r8
 8000980:	d9f7      	bls.n	8000972 <HAL_RCC_OscConfig+0x23a>
 8000982:	e71a      	b.n	80007ba <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000984:	2b05      	cmp	r3, #5
 8000986:	6a23      	ldr	r3, [r4, #32]
 8000988:	d103      	bne.n	8000992 <HAL_RCC_OscConfig+0x25a>
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6223      	str	r3, [r4, #32]
 8000990:	e7ba      	b.n	8000908 <HAL_RCC_OscConfig+0x1d0>
 8000992:	f023 0301 	bic.w	r3, r3, #1
 8000996:	6223      	str	r3, [r4, #32]
 8000998:	6a23      	ldr	r3, [r4, #32]
 800099a:	f023 0304 	bic.w	r3, r3, #4
 800099e:	e7b6      	b.n	800090e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009a0:	f7ff fd7e 	bl	80004a0 <HAL_GetTick>
 80009a4:	1b80      	subs	r0, r0, r6
 80009a6:	4540      	cmp	r0, r8
 80009a8:	d9b7      	bls.n	800091a <HAL_RCC_OscConfig+0x1e2>
 80009aa:	e706      	b.n	80007ba <HAL_RCC_OscConfig+0x82>
 80009ac:	40021000 	.word	0x40021000
 80009b0:	42420000 	.word	0x42420000
 80009b4:	20000000 	.word	0x20000000
 80009b8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009bc:	4c2a      	ldr	r4, [pc, #168]	; (8000a68 <HAL_RCC_OscConfig+0x330>)
 80009be:	6863      	ldr	r3, [r4, #4]
 80009c0:	f003 030c 	and.w	r3, r3, #12
 80009c4:	2b08      	cmp	r3, #8
 80009c6:	d03e      	beq.n	8000a46 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009c8:	2200      	movs	r2, #0
 80009ca:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <HAL_RCC_OscConfig+0x334>)
 80009cc:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80009ce:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009d0:	d12c      	bne.n	8000a2c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80009d2:	f7ff fd65 	bl	80004a0 <HAL_GetTick>
 80009d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009d8:	6823      	ldr	r3, [r4, #0]
 80009da:	0199      	lsls	r1, r3, #6
 80009dc:	d420      	bmi.n	8000a20 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80009de:	6a2b      	ldr	r3, [r5, #32]
 80009e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009e4:	d105      	bne.n	80009f2 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80009e6:	6862      	ldr	r2, [r4, #4]
 80009e8:	68a9      	ldr	r1, [r5, #8]
 80009ea:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80009ee:	430a      	orrs	r2, r1
 80009f0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009f2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80009f4:	6862      	ldr	r2, [r4, #4]
 80009f6:	430b      	orrs	r3, r1
 80009f8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80009fc:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80009fe:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a00:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <HAL_RCC_OscConfig+0x334>)
 8000a04:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000a06:	f7ff fd4b 	bl	80004a0 <HAL_GetTick>
 8000a0a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a0c:	6823      	ldr	r3, [r4, #0]
 8000a0e:	019a      	lsls	r2, r3, #6
 8000a10:	f53f aea8 	bmi.w	8000764 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a14:	f7ff fd44 	bl	80004a0 <HAL_GetTick>
 8000a18:	1b40      	subs	r0, r0, r5
 8000a1a:	2802      	cmp	r0, #2
 8000a1c:	d9f6      	bls.n	8000a0c <HAL_RCC_OscConfig+0x2d4>
 8000a1e:	e6cc      	b.n	80007ba <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a20:	f7ff fd3e 	bl	80004a0 <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	2802      	cmp	r0, #2
 8000a28:	d9d6      	bls.n	80009d8 <HAL_RCC_OscConfig+0x2a0>
 8000a2a:	e6c6      	b.n	80007ba <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000a2c:	f7ff fd38 	bl	80004a0 <HAL_GetTick>
 8000a30:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a32:	6823      	ldr	r3, [r4, #0]
 8000a34:	019b      	lsls	r3, r3, #6
 8000a36:	f57f ae95 	bpl.w	8000764 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a3a:	f7ff fd31 	bl	80004a0 <HAL_GetTick>
 8000a3e:	1b40      	subs	r0, r0, r5
 8000a40:	2802      	cmp	r0, #2
 8000a42:	d9f6      	bls.n	8000a32 <HAL_RCC_OscConfig+0x2fa>
 8000a44:	e6b9      	b.n	80007ba <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000a46:	2801      	cmp	r0, #1
 8000a48:	f43f aeb8 	beq.w	80007bc <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8000a4c:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a4e:	6a2a      	ldr	r2, [r5, #32]
 8000a50:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000a54:	4291      	cmp	r1, r2
 8000a56:	f47f ae9b 	bne.w	8000790 <HAL_RCC_OscConfig+0x58>
 8000a5a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000a5c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000a60:	4293      	cmp	r3, r2
 8000a62:	f43f ae7f 	beq.w	8000764 <HAL_RCC_OscConfig+0x2c>
 8000a66:	e693      	b.n	8000790 <HAL_RCC_OscConfig+0x58>
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	42420000 	.word	0x42420000

08000a70 <HAL_RCC_GetSysClockFreq>:
{
 8000a70:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000a74:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a76:	ac02      	add	r4, sp, #8
 8000a78:	f103 0510 	add.w	r5, r3, #16
 8000a7c:	4622      	mov	r2, r4
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	6859      	ldr	r1, [r3, #4]
 8000a82:	3308      	adds	r3, #8
 8000a84:	c203      	stmia	r2!, {r0, r1}
 8000a86:	42ab      	cmp	r3, r5
 8000a88:	4614      	mov	r4, r2
 8000a8a:	d1f7      	bne.n	8000a7c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a8c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8000a90:	4911      	ldr	r1, [pc, #68]	; (8000ad8 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a92:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000a96:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a98:	f003 020c 	and.w	r2, r3, #12
 8000a9c:	2a08      	cmp	r2, #8
 8000a9e:	d117      	bne.n	8000ad0 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000aa0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000aa4:	3218      	adds	r2, #24
 8000aa6:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000aa8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000aaa:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000aae:	d50c      	bpl.n	8000aca <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ab0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ab4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ab8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000aba:	3318      	adds	r3, #24
 8000abc:	446b      	add	r3, sp
 8000abe:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ac2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000ac6:	b007      	add	sp, #28
 8000ac8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_RCC_GetSysClockFreq+0x70>)
 8000acc:	4358      	muls	r0, r3
 8000ace:	e7fa      	b.n	8000ac6 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8000ad2:	e7f8      	b.n	8000ac6 <HAL_RCC_GetSysClockFreq+0x56>
 8000ad4:	080012b4 	.word	0x080012b4
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	007a1200 	.word	0x007a1200
 8000ae0:	003d0900 	.word	0x003d0900

08000ae4 <HAL_RCC_ClockConfig>:
{
 8000ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ae8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000aea:	4604      	mov	r4, r0
 8000aec:	b910      	cbnz	r0, 8000af4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000aee:	2001      	movs	r0, #1
}
 8000af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000af4:	4a44      	ldr	r2, [pc, #272]	; (8000c08 <HAL_RCC_ClockConfig+0x124>)
 8000af6:	6813      	ldr	r3, [r2, #0]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	428b      	cmp	r3, r1
 8000afe:	d328      	bcc.n	8000b52 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b00:	6821      	ldr	r1, [r4, #0]
 8000b02:	078e      	lsls	r6, r1, #30
 8000b04:	d430      	bmi.n	8000b68 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b06:	07ca      	lsls	r2, r1, #31
 8000b08:	d443      	bmi.n	8000b92 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000b0a:	4a3f      	ldr	r2, [pc, #252]	; (8000c08 <HAL_RCC_ClockConfig+0x124>)
 8000b0c:	6813      	ldr	r3, [r2, #0]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	42ab      	cmp	r3, r5
 8000b14:	d865      	bhi.n	8000be2 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b16:	6822      	ldr	r2, [r4, #0]
 8000b18:	4d3c      	ldr	r5, [pc, #240]	; (8000c0c <HAL_RCC_ClockConfig+0x128>)
 8000b1a:	f012 0f04 	tst.w	r2, #4
 8000b1e:	d16c      	bne.n	8000bfa <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b20:	0713      	lsls	r3, r2, #28
 8000b22:	d506      	bpl.n	8000b32 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b24:	686b      	ldr	r3, [r5, #4]
 8000b26:	6922      	ldr	r2, [r4, #16]
 8000b28:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b2c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b30:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000b32:	f7ff ff9d 	bl	8000a70 <HAL_RCC_GetSysClockFreq>
 8000b36:	686b      	ldr	r3, [r5, #4]
 8000b38:	4a35      	ldr	r2, [pc, #212]	; (8000c10 <HAL_RCC_ClockConfig+0x12c>)
 8000b3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b3e:	5cd3      	ldrb	r3, [r2, r3]
 8000b40:	40d8      	lsrs	r0, r3
 8000b42:	4b34      	ldr	r3, [pc, #208]	; (8000c14 <HAL_RCC_ClockConfig+0x130>)
 8000b44:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000b46:	4b34      	ldr	r3, [pc, #208]	; (8000c18 <HAL_RCC_ClockConfig+0x134>)
 8000b48:	6818      	ldr	r0, [r3, #0]
 8000b4a:	f7ff fc67 	bl	800041c <HAL_InitTick>
  return HAL_OK;
 8000b4e:	2000      	movs	r0, #0
 8000b50:	e7ce      	b.n	8000af0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b52:	6813      	ldr	r3, [r2, #0]
 8000b54:	f023 0307 	bic.w	r3, r3, #7
 8000b58:	430b      	orrs	r3, r1
 8000b5a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b5c:	6813      	ldr	r3, [r2, #0]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d1c3      	bne.n	8000aee <HAL_RCC_ClockConfig+0xa>
 8000b66:	e7cb      	b.n	8000b00 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b68:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <HAL_RCC_ClockConfig+0x128>)
 8000b6a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b6e:	bf1e      	ittt	ne
 8000b70:	685a      	ldrne	r2, [r3, #4]
 8000b72:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000b76:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b78:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b7a:	bf42      	ittt	mi
 8000b7c:	685a      	ldrmi	r2, [r3, #4]
 8000b7e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000b82:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	68a0      	ldr	r0, [r4, #8]
 8000b88:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000b8c:	4302      	orrs	r2, r0
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	e7b9      	b.n	8000b06 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b92:	6862      	ldr	r2, [r4, #4]
 8000b94:	4e1d      	ldr	r6, [pc, #116]	; (8000c0c <HAL_RCC_ClockConfig+0x128>)
 8000b96:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b98:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b9a:	d11a      	bne.n	8000bd2 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b9c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba0:	d0a5      	beq.n	8000aee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ba2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ba4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ba8:	f023 0303 	bic.w	r3, r3, #3
 8000bac:	4313      	orrs	r3, r2
 8000bae:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000bb0:	f7ff fc76 	bl	80004a0 <HAL_GetTick>
 8000bb4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bb6:	6873      	ldr	r3, [r6, #4]
 8000bb8:	6862      	ldr	r2, [r4, #4]
 8000bba:	f003 030c 	and.w	r3, r3, #12
 8000bbe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000bc2:	d0a2      	beq.n	8000b0a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bc4:	f7ff fc6c 	bl	80004a0 <HAL_GetTick>
 8000bc8:	1bc0      	subs	r0, r0, r7
 8000bca:	4540      	cmp	r0, r8
 8000bcc:	d9f3      	bls.n	8000bb6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8000bce:	2003      	movs	r0, #3
 8000bd0:	e78e      	b.n	8000af0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bd2:	2a02      	cmp	r2, #2
 8000bd4:	d102      	bne.n	8000bdc <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bd6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000bda:	e7e1      	b.n	8000ba0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bdc:	f013 0f02 	tst.w	r3, #2
 8000be0:	e7de      	b.n	8000ba0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000be2:	6813      	ldr	r3, [r2, #0]
 8000be4:	f023 0307 	bic.w	r3, r3, #7
 8000be8:	432b      	orrs	r3, r5
 8000bea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bec:	6813      	ldr	r3, [r2, #0]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	42ab      	cmp	r3, r5
 8000bf4:	f47f af7b 	bne.w	8000aee <HAL_RCC_ClockConfig+0xa>
 8000bf8:	e78d      	b.n	8000b16 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000bfa:	686b      	ldr	r3, [r5, #4]
 8000bfc:	68e1      	ldr	r1, [r4, #12]
 8000bfe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c02:	430b      	orrs	r3, r1
 8000c04:	606b      	str	r3, [r5, #4]
 8000c06:	e78b      	b.n	8000b20 <HAL_RCC_ClockConfig+0x3c>
 8000c08:	40022000 	.word	0x40022000
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	080012a4 	.word	0x080012a4
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000008 	.word	0x20000008

08000c1c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000c1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000c20:	461c      	mov	r4, r3
 8000c22:	4616      	mov	r6, r2
 8000c24:	460f      	mov	r7, r1
 8000c26:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8000c28:	f7ff fc3a 	bl	80004a0 <HAL_GetTick>
 8000c2c:	4434      	add	r4, r6
 8000c2e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8000c30:	f7ff fc36 	bl	80004a0 <HAL_GetTick>
 8000c34:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8000c3e:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000c40:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8000c42:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000c44:	6893      	ldr	r3, [r2, #8]
 8000c46:	ea37 0303 	bics.w	r3, r7, r3
 8000c4a:	d001      	beq.n	8000c50 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	e02e      	b.n	8000cae <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8000c50:	1c73      	adds	r3, r6, #1
 8000c52:	d0f7      	beq.n	8000c44 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8000c54:	f7ff fc24 	bl	80004a0 <HAL_GetTick>
 8000c58:	eba0 0008 	sub.w	r0, r0, r8
 8000c5c:	42a0      	cmp	r0, r4
 8000c5e:	d329      	bcc.n	8000cb4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000c60:	682b      	ldr	r3, [r5, #0]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000c68:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000c6a:	686a      	ldr	r2, [r5, #4]
 8000c6c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000c70:	d10a      	bne.n	8000c88 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8000c72:	68aa      	ldr	r2, [r5, #8]
 8000c74:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000c78:	d002      	beq.n	8000c80 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000c7a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000c7e:	d103      	bne.n	8000c88 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c86:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000c88:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000c8a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000c8e:	d107      	bne.n	8000ca0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c9e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000ca6:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8000ca8:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8000caa:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8000cae:	b002      	add	sp, #8
 8000cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8000cb4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8000cb6:	2b00      	cmp	r3, #0
      count--;
 8000cb8:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8000cba:	bf08      	it	eq
 8000cbc:	2400      	moveq	r4, #0
      count--;
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	e7be      	b.n	8000c40 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8000cc2:	bf00      	nop
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000cc8:	b510      	push	{r4, lr}
 8000cca:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000ccc:	460a      	mov	r2, r1
 8000cce:	2180      	movs	r1, #128	; 0x80
{
 8000cd0:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000cd2:	f7ff ffa3 	bl	8000c1c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8000cd6:	b120      	cbz	r0, 8000ce2 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000cd8:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000cda:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000cdc:	f043 0320 	orr.w	r3, r3, #32
 8000ce0:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000ce2:	bd10      	pop	{r4, pc}

08000ce4 <HAL_SPI_Init>:
{
 8000ce4:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	d051      	beq.n	8000d90 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8000cec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d14a      	bne.n	8000d88 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000cf2:	6842      	ldr	r2, [r0, #4]
 8000cf4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000cf8:	d000      	beq.n	8000cfc <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cfa:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000d00:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8000d04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d08:	b923      	cbnz	r3, 8000d14 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8000d0a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8000d0c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000d10:	f7ff fb22 	bl	8000358 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d14:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000d16:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d18:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000d1c:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000d1e:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d24:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000d26:	6863      	ldr	r3, [r4, #4]
 8000d28:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8000d2c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8000d30:	4303      	orrs	r3, r0
 8000d32:	68e0      	ldr	r0, [r4, #12]
 8000d34:	69a1      	ldr	r1, [r4, #24]
 8000d36:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8000d3a:	4303      	orrs	r3, r0
 8000d3c:	6920      	ldr	r0, [r4, #16]
 8000d3e:	f000 0002 	and.w	r0, r0, #2
 8000d42:	4303      	orrs	r3, r0
 8000d44:	6960      	ldr	r0, [r4, #20]
 8000d46:	f000 0001 	and.w	r0, r0, #1
 8000d4a:	4303      	orrs	r3, r0
 8000d4c:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8000d50:	4303      	orrs	r3, r0
 8000d52:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000d54:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000d56:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000d5e:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000d62:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8000d66:	4303      	orrs	r3, r0
 8000d68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000d6a:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8000d6e:	4303      	orrs	r3, r0
 8000d70:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000d72:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d74:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d76:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d7c:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000d7e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d80:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000d82:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8000d86:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d88:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8000d8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d8e:	e7b5      	b.n	8000cfc <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8000d90:	2001      	movs	r0, #1
 8000d92:	e7f8      	b.n	8000d86 <HAL_SPI_Init+0xa2>

08000d94 <HAL_SPI_Transmit>:
{
 8000d94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000d98:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000d9a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000d9e:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000da0:	2b01      	cmp	r3, #1
{
 8000da2:	460d      	mov	r5, r1
 8000da4:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8000da6:	f000 80a0 	beq.w	8000eea <HAL_SPI_Transmit+0x156>
 8000daa:	2301      	movs	r3, #1
 8000dac:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000db0:	f7ff fb76 	bl	80004a0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8000db4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000db8:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	b2d8      	uxtb	r0, r3
 8000dbe:	f040 8092 	bne.w	8000ee6 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d05d      	beq.n	8000e82 <HAL_SPI_Transmit+0xee>
 8000dc6:	2f00      	cmp	r7, #0
 8000dc8:	d05b      	beq.n	8000e82 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000dd0:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000dd2:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000dd4:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000dd6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxISR       = NULL;
 8000dda:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8000dde:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000de0:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8000de2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000de4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000de6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 8000de8:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8000dea:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000dec:	d107      	bne.n	8000dfe <HAL_SPI_Transmit+0x6a>
    __HAL_SPI_DISABLE(hspi);
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000df4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000dfc:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000dfe:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000e00:	68e1      	ldr	r1, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000e02:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000e04:	bf5e      	ittt	pl
 8000e06:	681a      	ldrpl	r2, [r3, #0]
 8000e08:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000e0c:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000e0e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000e12:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000e14:	d141      	bne.n	8000e9a <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000e16:	b10a      	cbz	r2, 8000e1c <HAL_SPI_Transmit+0x88>
 8000e18:	2f01      	cmp	r7, #1
 8000e1a:	d107      	bne.n	8000e2c <HAL_SPI_Transmit+0x98>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000e1c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000e20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000e22:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000e24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000e2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b9a3      	cbnz	r3, 8000e5c <HAL_SPI_Transmit+0xc8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000e32:	4642      	mov	r2, r8
 8000e34:	4631      	mov	r1, r6
 8000e36:	4620      	mov	r0, r4
 8000e38:	f7ff ff46 	bl	8000cc8 <SPI_EndRxTxTransaction>
 8000e3c:	2800      	cmp	r0, #0
 8000e3e:	d14f      	bne.n	8000ee0 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000e40:	68a3      	ldr	r3, [r4, #8]
 8000e42:	b933      	cbnz	r3, 8000e52 <HAL_SPI_Transmit+0xbe>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	9201      	str	r2, [sp, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	9301      	str	r3, [sp, #4]
 8000e50:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000e52:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000e54:	3800      	subs	r0, #0
 8000e56:	bf18      	it	ne
 8000e58:	2001      	movne	r0, #1
error:
 8000e5a:	e012      	b.n	8000e82 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000e5c:	6822      	ldr	r2, [r4, #0]
 8000e5e:	6893      	ldr	r3, [r2, #8]
 8000e60:	0798      	lsls	r0, r3, #30
 8000e62:	d505      	bpl.n	8000e70 <HAL_SPI_Transmit+0xdc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000e64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e66:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000e6a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000e6c:	6323      	str	r3, [r4, #48]	; 0x30
 8000e6e:	e7d9      	b.n	8000e24 <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000e70:	f7ff fb16 	bl	80004a0 <HAL_GetTick>
 8000e74:	eba0 0008 	sub.w	r0, r0, r8
 8000e78:	42b0      	cmp	r0, r6
 8000e7a:	d30b      	bcc.n	8000e94 <HAL_SPI_Transmit+0x100>
 8000e7c:	1c71      	adds	r1, r6, #1
 8000e7e:	d0d5      	beq.n	8000e2c <HAL_SPI_Transmit+0x98>
          errorcode = HAL_TIMEOUT;
 8000e80:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000e82:	2301      	movs	r3, #1
 8000e84:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000e8e:	b002      	add	sp, #8
 8000e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d1c9      	bne.n	8000e2c <HAL_SPI_Transmit+0x98>
 8000e98:	e7f2      	b.n	8000e80 <HAL_SPI_Transmit+0xec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000e9a:	b10a      	cbz	r2, 8000ea0 <HAL_SPI_Transmit+0x10c>
 8000e9c:	2f01      	cmp	r7, #1
 8000e9e:	d108      	bne.n	8000eb2 <HAL_SPI_Transmit+0x11e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000ea0:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000ea2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000ea4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000eaa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000eac:	3b01      	subs	r3, #1
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000eb2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0bb      	beq.n	8000e32 <HAL_SPI_Transmit+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	0792      	lsls	r2, r2, #30
 8000ec0:	d502      	bpl.n	8000ec8 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000ec2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ec4:	7812      	ldrb	r2, [r2, #0]
 8000ec6:	e7ec      	b.n	8000ea2 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000ec8:	f7ff faea 	bl	80004a0 <HAL_GetTick>
 8000ecc:	eba0 0008 	sub.w	r0, r0, r8
 8000ed0:	42b0      	cmp	r0, r6
 8000ed2:	d302      	bcc.n	8000eda <HAL_SPI_Transmit+0x146>
 8000ed4:	1c73      	adds	r3, r6, #1
 8000ed6:	d0ec      	beq.n	8000eb2 <HAL_SPI_Transmit+0x11e>
 8000ed8:	e7d2      	b.n	8000e80 <HAL_SPI_Transmit+0xec>
 8000eda:	2e00      	cmp	r6, #0
 8000edc:	d1e9      	bne.n	8000eb2 <HAL_SPI_Transmit+0x11e>
 8000ede:	e7cf      	b.n	8000e80 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000ee0:	2320      	movs	r3, #32
 8000ee2:	6563      	str	r3, [r4, #84]	; 0x54
 8000ee4:	e7ac      	b.n	8000e40 <HAL_SPI_Transmit+0xac>
    errorcode = HAL_BUSY;
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	e7cb      	b.n	8000e82 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8000eea:	2002      	movs	r0, #2
 8000eec:	e7cf      	b.n	8000e8e <HAL_SPI_Transmit+0xfa>
	...

08000ef0 <send_byte>:
	RST_PIN(DC_PORT, DC);
	send_byte(cmd);
	SET_PIN(DC_PORT, DC);
}

static void send_byte(uint8_t byte){
 8000ef0:	b513      	push	{r0, r1, r4, lr}
	RST_PIN(CS_PORT, CS);
 8000ef2:	4c0b      	ldr	r4, [pc, #44]	; (8000f20 <send_byte+0x30>)
static void send_byte(uint8_t byte){
 8000ef4:	f88d 0007 	strb.w	r0, [sp, #7]
	RST_PIN(CS_PORT, CS);
 8000ef8:	68e3      	ldr	r3, [r4, #12]
	HAL_SPI_Transmit(spi_ptr, &byte, 1, 1000);
 8000efa:	480a      	ldr	r0, [pc, #40]	; (8000f24 <send_byte+0x34>)
	RST_PIN(CS_PORT, CS);
 8000efc:	f023 0304 	bic.w	r3, r3, #4
 8000f00:	60e3      	str	r3, [r4, #12]
	HAL_SPI_Transmit(spi_ptr, &byte, 1, 1000);
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f08:	f10d 0107 	add.w	r1, sp, #7
 8000f0c:	6800      	ldr	r0, [r0, #0]
 8000f0e:	f7ff ff41 	bl	8000d94 <HAL_SPI_Transmit>
	SET_PIN(CS_PORT, CS);
 8000f12:	68e3      	ldr	r3, [r4, #12]
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	60e3      	str	r3, [r4, #12]
}
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd10      	pop	{r4, pc}
 8000f1e:	bf00      	nop
 8000f20:	40010800 	.word	0x40010800
 8000f24:	20000094 	.word	0x20000094

08000f28 <send_command>:
static void send_command(uint8_t cmd){
 8000f28:	b510      	push	{r4, lr}
	RST_PIN(DC_PORT, DC);
 8000f2a:	4c06      	ldr	r4, [pc, #24]	; (8000f44 <send_command+0x1c>)
 8000f2c:	68e3      	ldr	r3, [r4, #12]
 8000f2e:	f023 0302 	bic.w	r3, r3, #2
 8000f32:	60e3      	str	r3, [r4, #12]
	send_byte(cmd);
 8000f34:	f7ff ffdc 	bl	8000ef0 <send_byte>
	SET_PIN(DC_PORT, DC);
 8000f38:	68e3      	ldr	r3, [r4, #12]
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	60e3      	str	r3, [r4, #12]
}
 8000f40:	bd10      	pop	{r4, pc}
 8000f42:	bf00      	nop
 8000f44:	40010800 	.word	0x40010800

08000f48 <send_data>:

static void send_data(uint8_t buff[], uint16_t size){
 8000f48:	460a      	mov	r2, r1
	HAL_SPI_Transmit(spi_ptr, buff, size, 1000);
 8000f4a:	4601      	mov	r1, r0
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <send_data+0x10>)
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	6800      	ldr	r0, [r0, #0]
 8000f54:	f7ff bf1e 	b.w	8000d94 <HAL_SPI_Transmit>
 8000f58:	20000094 	.word	0x20000094

08000f5c <send_pixelVal>:
}

static void send_pixelVal(Colors_t color){
 8000f5c:	b513      	push	{r0, r1, r4, lr}
	uint8_t buff[2]={(color>>8), color&0xFF};
 8000f5e:	0a03      	lsrs	r3, r0, #8
	RST_PIN(CS_PORT, CS);
 8000f60:	4c09      	ldr	r4, [pc, #36]	; (8000f88 <send_pixelVal+0x2c>)
	uint8_t buff[2]={(color>>8), color&0xFF};
 8000f62:	f88d 0005 	strb.w	r0, [sp, #5]
 8000f66:	f88d 3004 	strb.w	r3, [sp, #4]
	RST_PIN(CS_PORT, CS);
 8000f6a:	68e3      	ldr	r3, [r4, #12]
	send_data(buff, 2);
 8000f6c:	2102      	movs	r1, #2
	RST_PIN(CS_PORT, CS);
 8000f6e:	f023 0304 	bic.w	r3, r3, #4
 8000f72:	60e3      	str	r3, [r4, #12]
	send_data(buff, 2);
 8000f74:	a801      	add	r0, sp, #4
 8000f76:	f7ff ffe7 	bl	8000f48 <send_data>
	SET_PIN(CS_PORT, CS);
 8000f7a:	68e3      	ldr	r3, [r4, #12]
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	60e3      	str	r3, [r4, #12]
}
 8000f82:	b002      	add	sp, #8
 8000f84:	bd10      	pop	{r4, pc}
 8000f86:	bf00      	nop
 8000f88:	40010800 	.word	0x40010800

08000f8c <ST7735_TFT_setXBoundary>:
void ST7735_TFT_setXBoundary(uint8_t x_start, uint8_t x_end){
 8000f8c:	b538      	push	{r3, r4, r5, lr}
	WindowX.start = x_start;
 8000f8e:	4d0a      	ldr	r5, [pc, #40]	; (8000fb8 <ST7735_TFT_setXBoundary+0x2c>)
	RST_PIN(CS_PORT, CS);
 8000f90:	4c0a      	ldr	r4, [pc, #40]	; (8000fbc <ST7735_TFT_setXBoundary+0x30>)
	WindowX.start = x_start;
 8000f92:	7068      	strb	r0, [r5, #1]
	send_command(CASET);
 8000f94:	202a      	movs	r0, #42	; 0x2a
	WindowX.end = x_end;
 8000f96:	70e9      	strb	r1, [r5, #3]
	send_command(CASET);
 8000f98:	f7ff ffc6 	bl	8000f28 <send_command>
	RST_PIN(CS_PORT, CS);
 8000f9c:	68e3      	ldr	r3, [r4, #12]
	send_data(WindowX.reg_val, 4);
 8000f9e:	2104      	movs	r1, #4
	RST_PIN(CS_PORT, CS);
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
 8000fa4:	60e3      	str	r3, [r4, #12]
	send_data(WindowX.reg_val, 4);
 8000fa6:	4628      	mov	r0, r5
 8000fa8:	f7ff ffce 	bl	8000f48 <send_data>
	SET_PIN(CS_PORT, CS);
 8000fac:	68e3      	ldr	r3, [r4, #12]
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	60e3      	str	r3, [r4, #12]
}
 8000fb4:	bd38      	pop	{r3, r4, r5, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000000f 	.word	0x2000000f
 8000fbc:	40010800 	.word	0x40010800

08000fc0 <ST7735_TFT_setYBoundary>:
void ST7735_TFT_setYBoundary(uint8_t y_start, uint8_t y_end){
 8000fc0:	b538      	push	{r3, r4, r5, lr}
	WindowY.start = y_start;
 8000fc2:	4d0a      	ldr	r5, [pc, #40]	; (8000fec <ST7735_TFT_setYBoundary+0x2c>)
	RST_PIN(CS_PORT, CS);
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	; (8000ff0 <ST7735_TFT_setYBoundary+0x30>)
	WindowY.start = y_start;
 8000fc6:	7068      	strb	r0, [r5, #1]
	send_command(RASET);
 8000fc8:	202b      	movs	r0, #43	; 0x2b
	WindowY.end = y_end;
 8000fca:	70e9      	strb	r1, [r5, #3]
	send_command(RASET);
 8000fcc:	f7ff ffac 	bl	8000f28 <send_command>
	RST_PIN(CS_PORT, CS);
 8000fd0:	68e3      	ldr	r3, [r4, #12]
	send_data(WindowY.reg_val, 4);
 8000fd2:	2104      	movs	r1, #4
	RST_PIN(CS_PORT, CS);
 8000fd4:	f023 0304 	bic.w	r3, r3, #4
 8000fd8:	60e3      	str	r3, [r4, #12]
	send_data(WindowY.reg_val, 4);
 8000fda:	4628      	mov	r0, r5
 8000fdc:	f7ff ffb4 	bl	8000f48 <send_data>
	SET_PIN(CS_PORT, CS);
 8000fe0:	68e3      	ldr	r3, [r4, #12]
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	60e3      	str	r3, [r4, #12]
}
 8000fe8:	bd38      	pop	{r3, r4, r5, pc}
 8000fea:	bf00      	nop
 8000fec:	20000013 	.word	0x20000013
 8000ff0:	40010800 	.word	0x40010800

08000ff4 <ST7735_TFT_setWindow>:
void ST7735_TFT_setWindow(uint8_t x_start, uint8_t x_end, uint8_t y_start, uint8_t y_end){
 8000ff4:	b538      	push	{r3, r4, r5, lr}
 8000ff6:	4614      	mov	r4, r2
 8000ff8:	461d      	mov	r5, r3
	ST7735_TFT_setXBoundary(x_start, x_end);
 8000ffa:	f7ff ffc7 	bl	8000f8c <ST7735_TFT_setXBoundary>
	ST7735_TFT_setYBoundary(y_start, y_end);
 8000ffe:	4629      	mov	r1, r5
 8001000:	4620      	mov	r0, r4
}
 8001002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ST7735_TFT_setYBoundary(y_start, y_end);
 8001006:	f7ff bfdb 	b.w	8000fc0 <ST7735_TFT_setYBoundary>

0800100a <ST7735_TFT_setColorMod>:
void ST7735_TFT_setColorMod(COLMOD_arg_t colmod){
 800100a:	b510      	push	{r4, lr}
 800100c:	4604      	mov	r4, r0
	send_command(COLMOD);
 800100e:	203a      	movs	r0, #58	; 0x3a
 8001010:	f7ff ff8a 	bl	8000f28 <send_command>
	send_byte(colmod);
 8001014:	4620      	mov	r0, r4
}
 8001016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	send_byte(colmod);
 800101a:	f7ff bf69 	b.w	8000ef0 <send_byte>
	...

08001020 <ST7735_TFT_init>:
void ST7735_TFT_init(SPI_HandleTypeDef *hspi_ptr){
 8001020:	b510      	push	{r4, lr}
	spi_ptr = hspi_ptr;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <ST7735_TFT_init+0x6c>)
	SET_PIN(CS_PORT,CS);
 8001024:	4c1a      	ldr	r4, [pc, #104]	; (8001090 <ST7735_TFT_init+0x70>)
	spi_ptr = hspi_ptr;
 8001026:	6018      	str	r0, [r3, #0]
	SET_PIN(CS_PORT,CS);
 8001028:	68e3      	ldr	r3, [r4, #12]
	HAL_Delay(5);
 800102a:	2005      	movs	r0, #5
	SET_PIN(CS_PORT,CS);
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	60e3      	str	r3, [r4, #12]
	SET_PIN(RST_PORT,RST);
 8001032:	68e3      	ldr	r3, [r4, #12]
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	60e3      	str	r3, [r4, #12]
	SET_PIN(DC_PORT,DC);
 800103a:	68e3      	ldr	r3, [r4, #12]
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	60e3      	str	r3, [r4, #12]
	RST_PIN(RST_PORT, RST);
 8001042:	68e3      	ldr	r3, [r4, #12]
 8001044:	f023 0308 	bic.w	r3, r3, #8
 8001048:	60e3      	str	r3, [r4, #12]
	HAL_Delay(5);
 800104a:	f7ff fa2f 	bl	80004ac <HAL_Delay>
	SET_PIN(RST_PORT, RST);
 800104e:	68e3      	ldr	r3, [r4, #12]
	HAL_Delay(200); //after max 120ms resetting cancel occurs
 8001050:	20c8      	movs	r0, #200	; 0xc8
	SET_PIN(RST_PORT, RST);
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	60e3      	str	r3, [r4, #12]
	HAL_Delay(200); //after max 120ms resetting cancel occurs
 8001058:	f7ff fa28 	bl	80004ac <HAL_Delay>
	send_command(SLPOUT);
 800105c:	2011      	movs	r0, #17
 800105e:	f7ff ff63 	bl	8000f28 <send_command>
	send_command(DISPON);
 8001062:	2029      	movs	r0, #41	; 0x29
 8001064:	f7ff ff60 	bl	8000f28 <send_command>
	HAL_Delay(300);
 8001068:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800106c:	f7ff fa1e 	bl	80004ac <HAL_Delay>
	ST7735_TFT_setColorMod(BitPerPixel_16);
 8001070:	2005      	movs	r0, #5
 8001072:	f7ff ffca 	bl	800100a <ST7735_TFT_setColorMod>
}
 8001076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_TFT_setWindow(WindowX.start, WindowX.end, WindowY.start, WindowY.end);
 800107a:	4a06      	ldr	r2, [pc, #24]	; (8001094 <ST7735_TFT_init+0x74>)
 800107c:	4806      	ldr	r0, [pc, #24]	; (8001098 <ST7735_TFT_init+0x78>)
 800107e:	78d3      	ldrb	r3, [r2, #3]
 8001080:	78c1      	ldrb	r1, [r0, #3]
 8001082:	7852      	ldrb	r2, [r2, #1]
 8001084:	7840      	ldrb	r0, [r0, #1]
 8001086:	f7ff bfb5 	b.w	8000ff4 <ST7735_TFT_setWindow>
 800108a:	bf00      	nop
 800108c:	20000094 	.word	0x20000094
 8001090:	40010800 	.word	0x40010800
 8001094:	20000013 	.word	0x20000013
 8001098:	2000000f 	.word	0x2000000f

0800109c <ST7735_TFT_setOrientation>:
	Madctl.reg_val=0;
 800109c:	2300      	movs	r3, #0
void ST7735_TFT_setOrientation(Orientation_t orientation){
 800109e:	b510      	push	{r4, lr}
	Madctl.reg_val=0;
 80010a0:	4c16      	ldr	r4, [pc, #88]	; (80010fc <ST7735_TFT_setOrientation+0x60>)
 80010a2:	7023      	strb	r3, [r4, #0]
	Screen.orienation = orientation;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <ST7735_TFT_setOrientation+0x64>)
 80010a6:	7098      	strb	r0, [r3, #2]
	switch(orientation){
 80010a8:	2803      	cmp	r0, #3
 80010aa:	d80b      	bhi.n	80010c4 <ST7735_TFT_setOrientation+0x28>
 80010ac:	e8df f000 	tbb	[pc, r0]
 80010b0:	1d120206 	.word	0x1d120206
		Madctl.bits.MX = 1;
 80010b4:	7822      	ldrb	r2, [r4, #0]
 80010b6:	f062 023f 	orn	r2, r2, #63	; 0x3f
 80010ba:	7022      	strb	r2, [r4, #0]
		Screen.height = ST7735_TFT_HEIGHT;
 80010bc:	22a0      	movs	r2, #160	; 0xa0
 80010be:	701a      	strb	r2, [r3, #0]
		Screen.width = ST7735_TFT_WIDTH;
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	705a      	strb	r2, [r3, #1]
	send_command(MADCTL);
 80010c4:	2036      	movs	r0, #54	; 0x36
 80010c6:	f7ff ff2f 	bl	8000f28 <send_command>
	send_byte(Madctl.reg_val);
 80010ca:	7820      	ldrb	r0, [r4, #0]
}
 80010cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	send_byte(Madctl.reg_val);
 80010d0:	f7ff bf0e 	b.w	8000ef0 <send_byte>
		Screen.height = ST7735_TFT_WIDTH;
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	701a      	strb	r2, [r3, #0]
		Screen.width = ST7735_TFT_HEIGHT;
 80010d8:	22a0      	movs	r2, #160	; 0xa0
 80010da:	705a      	strb	r2, [r3, #1]
		Madctl.bits.MV = 1;
 80010dc:	7823      	ldrb	r3, [r4, #0]
 80010de:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80010e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
		Madctl.bits.MV = 1;
 80010e6:	7023      	strb	r3, [r4, #0]
		break;
 80010e8:	e7ec      	b.n	80010c4 <ST7735_TFT_setOrientation+0x28>
		Screen.height = ST7735_TFT_WIDTH;
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	701a      	strb	r2, [r3, #0]
		Screen.width = ST7735_TFT_HEIGHT;
 80010ee:	22a0      	movs	r2, #160	; 0xa0
 80010f0:	705a      	strb	r2, [r3, #1]
		Madctl.bits.MV = 1;
 80010f2:	7823      	ldrb	r3, [r4, #0]
 80010f4:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80010f8:	e7f5      	b.n	80010e6 <ST7735_TFT_setOrientation+0x4a>
 80010fa:	bf00      	nop
 80010fc:	20000090 	.word	0x20000090
 8001100:	2000000c 	.word	0x2000000c

08001104 <ST7735_TFT_fillScreen>:
void ST7735_TFT_fillScreen(Colors_t color){
 8001104:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ST7735_TFT_setWindow(0, Screen.width, 0, Screen.height);
 8001106:	2200      	movs	r2, #0
void ST7735_TFT_fillScreen(Colors_t color){
 8001108:	4604      	mov	r4, r0
	ST7735_TFT_setWindow(0, Screen.width, 0, Screen.height);
 800110a:	4911      	ldr	r1, [pc, #68]	; (8001150 <ST7735_TFT_fillScreen+0x4c>)
 800110c:	4610      	mov	r0, r2
 800110e:	780b      	ldrb	r3, [r1, #0]
 8001110:	7849      	ldrb	r1, [r1, #1]
 8001112:	f7ff ff6f 	bl	8000ff4 <ST7735_TFT_setWindow>
	send_command(RAMWR);
 8001116:	202c      	movs	r0, #44	; 0x2c
 8001118:	f7ff ff06 	bl	8000f28 <send_command>
	uint8_t buff[2]={(color>>8), color&0xFF};
 800111c:	0a23      	lsrs	r3, r4, #8
 800111e:	f88d 4005 	strb.w	r4, [sp, #5]
	RST_PIN(CS_PORT, CS);
 8001122:	f44f 44a0 	mov.w	r4, #20480	; 0x5000
 8001126:	4d0b      	ldr	r5, [pc, #44]	; (8001154 <ST7735_TFT_fillScreen+0x50>)
	uint8_t buff[2]={(color>>8), color&0xFF};
 8001128:	f88d 3004 	strb.w	r3, [sp, #4]
	RST_PIN(CS_PORT, CS);
 800112c:	68eb      	ldr	r3, [r5, #12]
 800112e:	f023 0304 	bic.w	r3, r3, #4
 8001132:	60eb      	str	r3, [r5, #12]
	for(uint16_t i = 0; i < ST7735_TFT_PIXEL_NUM; i++){
 8001134:	3c01      	subs	r4, #1
		send_data(buff, 2);
 8001136:	2102      	movs	r1, #2
 8001138:	a801      	add	r0, sp, #4
	for(uint16_t i = 0; i < ST7735_TFT_PIXEL_NUM; i++){
 800113a:	b2a4      	uxth	r4, r4
		send_data(buff, 2);
 800113c:	f7ff ff04 	bl	8000f48 <send_data>
	for(uint16_t i = 0; i < ST7735_TFT_PIXEL_NUM; i++){
 8001140:	2c00      	cmp	r4, #0
 8001142:	d1f7      	bne.n	8001134 <ST7735_TFT_fillScreen+0x30>
	SET_PIN(CS_PORT, CS);
 8001144:	68eb      	ldr	r3, [r5, #12]
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	60eb      	str	r3, [r5, #12]
}
 800114c:	b003      	add	sp, #12
 800114e:	bd30      	pop	{r4, r5, pc}
 8001150:	2000000c 	.word	0x2000000c
 8001154:	40010800 	.word	0x40010800

08001158 <ST7735_TFT_writeChar>:
void ST7735_TFT_writeChar(char ch, uint8_t x_addr, uint8_t y_addr, Colors_t charColor, Colors_t backgroundColor){
 8001158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800115c:	4604      	mov	r4, r0
 800115e:	461d      	mov	r5, r3
 8001160:	4608      	mov	r0, r1
	ST7735_TFT_setWindow(x_addr, x_addr+7, y_addr, y_addr+7);
 8001162:	1dd3      	adds	r3, r2, #7
 8001164:	3107      	adds	r1, #7
 8001166:	b2db      	uxtb	r3, r3
	RST_PIN(CS_PORT, CS);
 8001168:	4f16      	ldr	r7, [pc, #88]	; (80011c4 <ST7735_TFT_writeChar+0x6c>)
	ST7735_TFT_setWindow(x_addr, x_addr+7, y_addr, y_addr+7);
 800116a:	b2c9      	uxtb	r1, r1
void ST7735_TFT_writeChar(char ch, uint8_t x_addr, uint8_t y_addr, Colors_t charColor, Colors_t backgroundColor){
 800116c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	ST7735_TFT_setWindow(x_addr, x_addr+7, y_addr, y_addr+7);
 8001170:	f7ff ff40 	bl	8000ff4 <ST7735_TFT_setWindow>
	send_command(RAMWR);
 8001174:	202c      	movs	r0, #44	; 0x2c
 8001176:	f7ff fed7 	bl	8000f28 <send_command>
	RST_PIN(CS_PORT, CS);
 800117a:	3c20      	subs	r4, #32
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <ST7735_TFT_writeChar+0x70>)
 8001180:	b2e4      	uxtb	r4, r4
 8001182:	eb02 09c4 	add.w	r9, r2, r4, lsl #3
 8001186:	f023 0304 	bic.w	r3, r3, #4
 800118a:	3208      	adds	r2, #8
 800118c:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 8; i++){
 800118e:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
void ST7735_TFT_writeChar(char ch, uint8_t x_addr, uint8_t y_addr, Colors_t charColor, Colors_t backgroundColor){
 8001192:	f04f 0807 	mov.w	r8, #7
			uint16_t val = arr[(uint8_t)(ch-0x20)][i]>>j;
 8001196:	f899 3000 	ldrb.w	r3, [r9]
 800119a:	fa43 f308 	asr.w	r3, r3, r8
			if((val&1)==1)send_pixelVal(charColor);
 800119e:	07db      	lsls	r3, r3, #31
 80011a0:	bf4c      	ite	mi
 80011a2:	4628      	movmi	r0, r5
			else send_pixelVal(backgroundColor);
 80011a4:	4630      	movpl	r0, r6
 80011a6:	f7ff fed9 	bl	8000f5c <send_pixelVal>
		for(int8_t j = 7; j >= 0; j--){
 80011aa:	f1b8 0801 	subs.w	r8, r8, #1
 80011ae:	d2f2      	bcs.n	8001196 <ST7735_TFT_writeChar+0x3e>
	for(uint8_t i = 0; i < 8; i++){
 80011b0:	f109 0901 	add.w	r9, r9, #1
 80011b4:	45a1      	cmp	r9, r4
 80011b6:	d1ec      	bne.n	8001192 <ST7735_TFT_writeChar+0x3a>
	SET_PIN(CS_PORT, CS);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	60fb      	str	r3, [r7, #12]
}
 80011c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011c4:	40010800 	.word	0x40010800
 80011c8:	080012c5 	.word	0x080012c5

080011cc <ST7735_TFT_writeString>:
void ST7735_TFT_writeString(char text[], uint8_t x_addr, uint8_t y_addr, Colors_t charColor, Colors_t backgroundColor){
 80011cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80011d0:	4606      	mov	r6, r0
 80011d2:	460c      	mov	r4, r1
 80011d4:	4615      	mov	r5, r2
 80011d6:	4698      	mov	r8, r3
	for(uint8_t i = 0; text[i] != '\0'; i++, x_addr+=8){
 80011d8:	2700      	movs	r7, #0
void ST7735_TFT_writeString(char text[], uint8_t x_addr, uint8_t y_addr, Colors_t charColor, Colors_t backgroundColor){
 80011da:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
		if((x_addr + 8) > (Screen.width)){
 80011de:	f8df a034 	ldr.w	sl, [pc, #52]	; 8001214 <ST7735_TFT_writeString+0x48>
	for(uint8_t i = 0; text[i] != '\0'; i++, x_addr+=8){
 80011e2:	b2fb      	uxtb	r3, r7
 80011e4:	5cf0      	ldrb	r0, [r6, r3]
 80011e6:	b910      	cbnz	r0, 80011ee <ST7735_TFT_writeString+0x22>
}
 80011e8:	b002      	add	sp, #8
 80011ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if((x_addr + 8) > (Screen.width)){
 80011ee:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80011f2:	1de3      	adds	r3, r4, #7
 80011f4:	4293      	cmp	r3, r2
			x_addr = 0;
 80011f6:	bfa2      	ittt	ge
 80011f8:	2400      	movge	r4, #0
			y_addr += 9;
 80011fa:	3509      	addge	r5, #9
 80011fc:	b2ed      	uxtbge	r5, r5
		ST7735_TFT_writeChar(text[i], x_addr, y_addr, charColor, backgroundColor);
 80011fe:	4621      	mov	r1, r4
 8001200:	4643      	mov	r3, r8
 8001202:	462a      	mov	r2, r5
 8001204:	f8cd 9000 	str.w	r9, [sp]
	for(uint8_t i = 0; text[i] != '\0'; i++, x_addr+=8){
 8001208:	3408      	adds	r4, #8
		ST7735_TFT_writeChar(text[i], x_addr, y_addr, charColor, backgroundColor);
 800120a:	f7ff ffa5 	bl	8001158 <ST7735_TFT_writeChar>
	for(uint8_t i = 0; text[i] != '\0'; i++, x_addr+=8){
 800120e:	b2e4      	uxtb	r4, r4
 8001210:	3701      	adds	r7, #1
 8001212:	e7e6      	b.n	80011e2 <ST7735_TFT_writeString+0x16>
 8001214:	2000000c 	.word	0x2000000c

08001218 <__libc_init_array>:
 8001218:	b570      	push	{r4, r5, r6, lr}
 800121a:	2600      	movs	r6, #0
 800121c:	4d0c      	ldr	r5, [pc, #48]	; (8001250 <__libc_init_array+0x38>)
 800121e:	4c0d      	ldr	r4, [pc, #52]	; (8001254 <__libc_init_array+0x3c>)
 8001220:	1b64      	subs	r4, r4, r5
 8001222:	10a4      	asrs	r4, r4, #2
 8001224:	42a6      	cmp	r6, r4
 8001226:	d109      	bne.n	800123c <__libc_init_array+0x24>
 8001228:	f000 f822 	bl	8001270 <_init>
 800122c:	2600      	movs	r6, #0
 800122e:	4d0a      	ldr	r5, [pc, #40]	; (8001258 <__libc_init_array+0x40>)
 8001230:	4c0a      	ldr	r4, [pc, #40]	; (800125c <__libc_init_array+0x44>)
 8001232:	1b64      	subs	r4, r4, r5
 8001234:	10a4      	asrs	r4, r4, #2
 8001236:	42a6      	cmp	r6, r4
 8001238:	d105      	bne.n	8001246 <__libc_init_array+0x2e>
 800123a:	bd70      	pop	{r4, r5, r6, pc}
 800123c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001240:	4798      	blx	r3
 8001242:	3601      	adds	r6, #1
 8001244:	e7ee      	b.n	8001224 <__libc_init_array+0xc>
 8001246:	f855 3b04 	ldr.w	r3, [r5], #4
 800124a:	4798      	blx	r3
 800124c:	3601      	adds	r6, #1
 800124e:	e7f2      	b.n	8001236 <__libc_init_array+0x1e>
 8001250:	080015c8 	.word	0x080015c8
 8001254:	080015c8 	.word	0x080015c8
 8001258:	080015c8 	.word	0x080015c8
 800125c:	080015cc 	.word	0x080015cc

08001260 <memset>:
 8001260:	4603      	mov	r3, r0
 8001262:	4402      	add	r2, r0
 8001264:	4293      	cmp	r3, r2
 8001266:	d100      	bne.n	800126a <memset+0xa>
 8001268:	4770      	bx	lr
 800126a:	f803 1b01 	strb.w	r1, [r3], #1
 800126e:	e7f9      	b.n	8001264 <memset+0x4>

08001270 <_init>:
 8001270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001272:	bf00      	nop
 8001274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001276:	bc08      	pop	{r3}
 8001278:	469e      	mov	lr, r3
 800127a:	4770      	bx	lr

0800127c <_fini>:
 800127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127e:	bf00      	nop
 8001280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001282:	bc08      	pop	{r3}
 8001284:	469e      	mov	lr, r3
 8001286:	4770      	bx	lr
