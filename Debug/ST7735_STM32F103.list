
ST7735_STM32F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001210  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  0800131c  0800131c  0001131c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016c0  080016c0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080016c0  080016c0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016c0  080016c0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016c0  080016c0  000116c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016c4  080016c4  000116c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080016c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000018  080016e0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080016e0  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f0d  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d1  00000000  00000000  00026f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00003030  00000000  00000000  0002871f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000558  00000000  00000000  0002b750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000798  00000000  00000000  0002bca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015bda  00000000  00000000  0002c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007fe8  00000000  00000000  0004201a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b90d  00000000  00000000  0004a002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c590f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e38  00000000  00000000  000c5960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08001304 	.word	0x08001304

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08001304 	.word	0x08001304

0800014c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000150:	2220      	movs	r2, #32
 8000152:	2100      	movs	r1, #0
 8000154:	a807      	add	r0, sp, #28
 8000156:	f001 f8cd 	bl	80012f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800015a:	2214      	movs	r2, #20
 800015c:	2100      	movs	r1, #0
 800015e:	a801      	add	r0, sp, #4
 8000160:	f001 f8c8 	bl	80012f4 <memset>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000164:	2310      	movs	r3, #16
 8000166:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000168:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800016a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800016e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000172:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000174:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000176:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000178:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800017a:	f000 fb09 	bl	8000790 <HAL_RCC_OscConfig>
 800017e:	b108      	cbz	r0, 8000184 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000180:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000182:	e7fe      	b.n	8000182 <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000184:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000186:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800018a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800018e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000190:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000194:	4621      	mov	r1, r4
 8000196:	a801      	add	r0, sp, #4
 8000198:	f000 fcd0 	bl	8000b3c <HAL_RCC_ClockConfig>
 800019c:	b108      	cbz	r0, 80001a2 <SystemClock_Config+0x56>
 800019e:	b672      	cpsid	i
  while (1)
 80001a0:	e7fe      	b.n	80001a0 <SystemClock_Config+0x54>
}
 80001a2:	b010      	add	sp, #64	; 0x40
 80001a4:	bd10      	pop	{r4, pc}
	...

080001a8 <main>:
{
 80001a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80001ac:	b088      	sub	sp, #32
  HAL_Init();
 80001ae:	f000 f985 	bl	80004bc <HAL_Init>
  SystemClock_Config();
 80001b2:	f7ff ffcb 	bl	800014c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001b6:	2210      	movs	r2, #16
 80001b8:	2100      	movs	r1, #0
 80001ba:	eb0d 0002 	add.w	r0, sp, r2
 80001be:	f001 f899 	bl	80012f4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001c2:	4b65      	ldr	r3, [pc, #404]	; (8000358 <main+0x1b0>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001c8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001ca:	4864      	ldr	r0, [pc, #400]	; (800035c <main+0x1b4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001cc:	f042 0210 	orr.w	r2, r2, #16
 80001d0:	619a      	str	r2, [r3, #24]
 80001d2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d4:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001d6:	f002 0210 	and.w	r2, r2, #16
 80001da:	9202      	str	r2, [sp, #8]
 80001dc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001de:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e0:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001e2:	f042 0204 	orr.w	r2, r2, #4
 80001e6:	619a      	str	r2, [r3, #24]
 80001e8:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001ea:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ec:	f003 0304 	and.w	r3, r3, #4
 80001f0:	9303      	str	r3, [sp, #12]
 80001f2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001f4:	f000 fac6 	bl	8000784 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	210e      	movs	r1, #14
 80001fc:	4858      	ldr	r0, [pc, #352]	; (8000360 <main+0x1b8>)
 80001fe:	f000 fac1 	bl	8000784 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000202:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000208:	4854      	ldr	r0, [pc, #336]	; (800035c <main+0x1b4>)
 800020a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800020c:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000210:	e9cd 5706 	strd	r5, r7, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000214:	f000 f9e0 	bl	80005d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000218:	230e      	movs	r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	4851      	ldr	r0, [pc, #324]	; (8000360 <main+0x1b8>)
 800021c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800021e:	e9cd 3604 	strd	r3, r6, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000222:	e9cd 5706 	strd	r5, r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000226:	f000 f9d7 	bl	80005d8 <HAL_GPIO_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800022a:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 800022e:	4c4d      	ldr	r4, [pc, #308]	; (8000364 <main+0x1bc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000230:	4a4d      	ldr	r2, [pc, #308]	; (8000368 <main+0x1c0>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000232:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000236:	e9c4 2300 	strd	r2, r3, [r4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800023a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800023e:	e9c4 3502 	strd	r3, r5, [r4, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000242:	2308      	movs	r3, #8
 8000244:	e9c4 1306 	strd	r1, r3, [r4, #24]
  hspi1.Init.CRCPolynomial = 10;
 8000248:	230a      	movs	r3, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800024a:	4620      	mov	r0, r4
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800024c:	e9c4 5508 	strd	r5, r5, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000250:	62a5      	str	r5, [r4, #40]	; 0x28
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000252:	e9c4 7604 	strd	r7, r6, [r4, #16]
  hspi1.Init.CRCPolynomial = 10;
 8000256:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000258:	f000 fd70 	bl	8000d3c <HAL_SPI_Init>
 800025c:	4605      	mov	r5, r0
 800025e:	b108      	cbz	r0, 8000264 <main+0xbc>
 8000260:	b672      	cpsid	i
  while (1)
 8000262:	e7fe      	b.n	8000262 <main+0xba>
  ST7735_TFT_init(&hspi1);
 8000264:	4620      	mov	r0, r4
 8000266:	f000 ff07 	bl	8001078 <ST7735_TFT_init>
  ST7735_TFT_fillScreen(BLUE);
 800026a:	201f      	movs	r0, #31
 800026c:	f000 ff96 	bl	800119c <ST7735_TFT_fillScreen>
  ST7735_TFT_setOrientation(LANDSCAPE);
 8000270:	4628      	mov	r0, r5
 8000272:	f000 ff3f 	bl	80010f4 <ST7735_TFT_setOrientation>
  char buff[16]={' ','!','"','#','$','%','&','\'','{','}','*','+',',','-','.','/'};
 8000276:	4b3d      	ldr	r3, [pc, #244]	; (800036c <main+0x1c4>)
 8000278:	ac04      	add	r4, sp, #16
 800027a:	f103 0610 	add.w	r6, r3, #16
 800027e:	4622      	mov	r2, r4
 8000280:	6818      	ldr	r0, [r3, #0]
 8000282:	6859      	ldr	r1, [r3, #4]
 8000284:	3308      	adds	r3, #8
 8000286:	c203      	stmia	r2!, {r0, r1}
 8000288:	42b3      	cmp	r3, r6
 800028a:	4614      	mov	r4, r2
 800028c:	d1f7      	bne.n	800027e <main+0xd6>
  for(uint8_t i = 0; i < 16; i++){
 800028e:	ac04      	add	r4, sp, #16
  char buff[16]={' ','!','"','#','$','%','&','\'','{','}','*','+',',','-','.','/'};
 8000290:	2600      	movs	r6, #0
 8000292:	4627      	mov	r7, r4
	  ST7735_TFT_writeChar(buff[i], i*8, 0, BLACK, WHITE);
 8000294:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8000298:	2300      	movs	r3, #0
 800029a:	4631      	mov	r1, r6
 800029c:	f8cd 8000 	str.w	r8, [sp]
  for(uint8_t i = 0; i < 16; i++){
 80002a0:	3608      	adds	r6, #8
	  ST7735_TFT_writeChar(buff[i], i*8, 0, BLACK, WHITE);
 80002a2:	461a      	mov	r2, r3
 80002a4:	f817 0b01 	ldrb.w	r0, [r7], #1
  for(uint8_t i = 0; i < 16; i++){
 80002a8:	b2f6      	uxtb	r6, r6
	  ST7735_TFT_writeChar(buff[i], i*8, 0, BLACK, WHITE);
 80002aa:	f000 ff9f 	bl	80011ec <ST7735_TFT_writeChar>
  for(uint8_t i = 0; i < 16; i++){
 80002ae:	2e80      	cmp	r6, #128	; 0x80
 80002b0:	d1f2      	bne.n	8000298 <main+0xf0>
  ST7735_TFT_writeChar(buff[i], i*8, 10, YELLOW, BLUE);
 80002b2:	261f      	movs	r6, #31
 80002b4:	4629      	mov	r1, r5
 80002b6:	9600      	str	r6, [sp, #0]
  for(uint8_t i = 0; i < 16; i++){
 80002b8:	3508      	adds	r5, #8
  ST7735_TFT_writeChar(buff[i], i*8, 10, YELLOW, BLUE);
 80002ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80002be:	220a      	movs	r2, #10
 80002c0:	f814 0b01 	ldrb.w	r0, [r4], #1
  for(uint8_t i = 0; i < 16; i++){
 80002c4:	b2ed      	uxtb	r5, r5
  ST7735_TFT_writeChar(buff[i], i*8, 10, YELLOW, BLUE);
 80002c6:	f000 ff91 	bl	80011ec <ST7735_TFT_writeChar>
  for(uint8_t i = 0; i < 16; i++){
 80002ca:	2d80      	cmp	r5, #128	; 0x80
 80002cc:	d1f2      	bne.n	80002b4 <main+0x10c>
  ST7735_TFT_Paint(0, 159, 50, 127, WHITE);
 80002ce:	f64f 74ff 	movw	r4, #65535	; 0xffff
  HAL_Delay(1000);
 80002d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d6:	f000 f915 	bl	8000504 <HAL_Delay>
  ST7735_TFT_writeString("merhaba ben furkan yildiran c", 0, 20, YELLOW, BLUE);
 80002da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80002de:	2214      	movs	r2, #20
 80002e0:	2100      	movs	r1, #0
 80002e2:	4823      	ldr	r0, [pc, #140]	; (8000370 <main+0x1c8>)
 80002e4:	9600      	str	r6, [sp, #0]
 80002e6:	f000 ffbb 	bl	8001260 <ST7735_TFT_writeString>
  ST7735_TFT_writeString("Bu bir DENEMEDIR", 0, 40, YELLOW, BLUE);
 80002ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80002ee:	2228      	movs	r2, #40	; 0x28
 80002f0:	2100      	movs	r1, #0
 80002f2:	4820      	ldr	r0, [pc, #128]	; (8000374 <main+0x1cc>)
 80002f4:	9600      	str	r6, [sp, #0]
 80002f6:	f000 ffb3 	bl	8001260 <ST7735_TFT_writeString>
  ST7735_TFT_Paint(0, 159, 50, 127, WHITE);
 80002fa:	237f      	movs	r3, #127	; 0x7f
 80002fc:	2232      	movs	r2, #50	; 0x32
 80002fe:	219f      	movs	r1, #159	; 0x9f
 8000300:	2000      	movs	r0, #0
 8000302:	9400      	str	r4, [sp, #0]
 8000304:	f000 ff18 	bl	8001138 <ST7735_TFT_Paint>
  ST7735_TFT_writeString("furkanyldrn0@gmail.com", 0, 50, RED, WHITE);
 8000308:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800030c:	2232      	movs	r2, #50	; 0x32
 800030e:	2100      	movs	r1, #0
 8000310:	4819      	ldr	r0, [pc, #100]	; (8000378 <main+0x1d0>)
 8000312:	9400      	str	r4, [sp, #0]
 8000314:	f000 ffa4 	bl	8001260 <ST7735_TFT_writeString>
  ST7735_TFT_writeString("this place is white!! but text color is red", 0, 60, RED, WHITE);
 8000318:	9400      	str	r4, [sp, #0]
  ST7735_TFT_Paint(0, 127, 0, 80, BLACK);
 800031a:	2400      	movs	r4, #0
  ST7735_TFT_writeString("this place is white!! but text color is red", 0, 60, RED, WHITE);
 800031c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000320:	223c      	movs	r2, #60	; 0x3c
 8000322:	2100      	movs	r1, #0
 8000324:	4815      	ldr	r0, [pc, #84]	; (800037c <main+0x1d4>)
 8000326:	f000 ff9b 	bl	8001260 <ST7735_TFT_writeString>
  ST7735_TFT_setOrientation(VERTICAL);
 800032a:	2001      	movs	r0, #1
 800032c:	f000 fee2 	bl	80010f4 <ST7735_TFT_setOrientation>
  HAL_Delay(2000);
 8000330:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000334:	f000 f8e6 	bl	8000504 <HAL_Delay>
  ST7735_TFT_Paint(0, 127, 0, 80, BLACK);
 8000338:	2350      	movs	r3, #80	; 0x50
 800033a:	4622      	mov	r2, r4
 800033c:	217f      	movs	r1, #127	; 0x7f
 800033e:	4620      	mov	r0, r4
 8000340:	9400      	str	r4, [sp, #0]
 8000342:	f000 fef9 	bl	8001138 <ST7735_TFT_Paint>
  ST7735_TFT_writeString("merhaba ben furkan yildiran c", 0, 20, YELLOW, BLUE);
 8000346:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800034a:	2214      	movs	r2, #20
 800034c:	4621      	mov	r1, r4
 800034e:	4808      	ldr	r0, [pc, #32]	; (8000370 <main+0x1c8>)
 8000350:	9600      	str	r6, [sp, #0]
 8000352:	f000 ff85 	bl	8001260 <ST7735_TFT_writeString>
  while(1);
 8000356:	e7fe      	b.n	8000356 <main+0x1ae>
 8000358:	40021000 	.word	0x40021000
 800035c:	40011000 	.word	0x40011000
 8000360:	40010800 	.word	0x40010800
 8000364:	20000034 	.word	0x20000034
 8000368:	40013000 	.word	0x40013000
 800036c:	0800138e 	.word	0x0800138e
 8000370:	0800131c 	.word	0x0800131c
 8000374:	0800133a 	.word	0x0800133a
 8000378:	0800134b 	.word	0x0800134b
 800037c:	08001362 	.word	0x08001362

08000380 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000380:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <HAL_MspInit+0x2c>)
{
 8000382:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000384:	699a      	ldr	r2, [r3, #24]
 8000386:	f042 0201 	orr.w	r2, r2, #1
 800038a:	619a      	str	r2, [r3, #24]
 800038c:	699a      	ldr	r2, [r3, #24]
 800038e:	f002 0201 	and.w	r2, r2, #1
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000396:	69da      	ldr	r2, [r3, #28]
 8000398:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800039c:	61da      	str	r2, [r3, #28]
 800039e:	69db      	ldr	r3, [r3, #28]
 80003a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a8:	b002      	add	sp, #8
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000

080003b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003b0:	b510      	push	{r4, lr}
 80003b2:	4604      	mov	r4, r0
 80003b4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	2210      	movs	r2, #16
 80003b8:	2100      	movs	r1, #0
 80003ba:	a802      	add	r0, sp, #8
 80003bc:	f000 ff9a 	bl	80012f4 <memset>
  if(hspi->Instance==SPI1)
 80003c0:	6822      	ldr	r2, [r4, #0]
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <HAL_SPI_MspInit+0x58>)
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d11d      	bne.n	8000404 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003c8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80003cc:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ce:	480f      	ldr	r0, [pc, #60]	; (800040c <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80003d4:	619a      	str	r2, [r3, #24]
 80003d6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d8:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80003de:	9200      	str	r2, [sp, #0]
 80003e0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e2:	699a      	ldr	r2, [r3, #24]
 80003e4:	f042 0204 	orr.w	r2, r2, #4
 80003e8:	619a      	str	r2, [r3, #24]
 80003ea:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ec:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ee:	f003 0304 	and.w	r3, r3, #4
 80003f2:	9301      	str	r3, [sp, #4]
 80003f4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003f6:	2302      	movs	r3, #2
 80003f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003fc:	2303      	movs	r3, #3
 80003fe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000400:	f000 f8ea 	bl	80005d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000404:	b006      	add	sp, #24
 8000406:	bd10      	pop	{r4, pc}
 8000408:	40013000 	.word	0x40013000
 800040c:	40010800 	.word	0x40010800

08000410 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <NMI_Handler>

08000412 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000412:	e7fe      	b.n	8000412 <HardFault_Handler>

08000414 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000414:	e7fe      	b.n	8000414 <MemManage_Handler>

08000416 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000416:	e7fe      	b.n	8000416 <BusFault_Handler>

08000418 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000418:	e7fe      	b.n	8000418 <UsageFault_Handler>

0800041a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800041a:	4770      	bx	lr

0800041c <DebugMon_Handler>:
 800041c:	4770      	bx	lr

0800041e <PendSV_Handler>:
 800041e:	4770      	bx	lr

08000420 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000420:	f000 b85e 	b.w	80004e0 <HAL_IncTick>

08000424 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000424:	4770      	bx	lr
	...

08000428 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000428:	480c      	ldr	r0, [pc, #48]	; (800045c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800042a:	490d      	ldr	r1, [pc, #52]	; (8000460 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000430:	e002      	b.n	8000438 <LoopCopyDataInit>

08000432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000436:	3304      	adds	r3, #4

08000438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800043c:	d3f9      	bcc.n	8000432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043e:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000440:	4c0a      	ldr	r4, [pc, #40]	; (800046c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000444:	e001      	b.n	800044a <LoopFillZerobss>

08000446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000448:	3204      	adds	r2, #4

0800044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800044c:	d3fb      	bcc.n	8000446 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800044e:	f7ff ffe9 	bl	8000424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000452:	f000 ff2b 	bl	80012ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000456:	f7ff fea7 	bl	80001a8 <main>
  bx lr
 800045a:	4770      	bx	lr
  ldr r0, =_sdata
 800045c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000460:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000464:	080016c8 	.word	0x080016c8
  ldr r2, =_sbss
 8000468:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800046c:	20000098 	.word	0x20000098

08000470 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000470:	e7fe      	b.n	8000470 <ADC1_2_IRQHandler>
	...

08000474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000474:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <HAL_InitTick+0x3c>)
{
 8000478:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800047a:	7818      	ldrb	r0, [r3, #0]
 800047c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000480:	fbb3 f3f0 	udiv	r3, r3, r0
 8000484:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <HAL_InitTick+0x40>)
 8000486:	6810      	ldr	r0, [r2, #0]
 8000488:	fbb0 f0f3 	udiv	r0, r0, r3
 800048c:	f000 f890 	bl	80005b0 <HAL_SYSTICK_Config>
 8000490:	4604      	mov	r4, r0
 8000492:	b958      	cbnz	r0, 80004ac <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000494:	2d0f      	cmp	r5, #15
 8000496:	d809      	bhi.n	80004ac <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000498:	4602      	mov	r2, r0
 800049a:	4629      	mov	r1, r5
 800049c:	f04f 30ff 	mov.w	r0, #4294967295
 80004a0:	f000 f854 	bl	800054c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004a4:	4620      	mov	r0, r4
 80004a6:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <HAL_InitTick+0x44>)
 80004a8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80004aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80004ac:	2001      	movs	r0, #1
 80004ae:	e7fc      	b.n	80004aa <HAL_InitTick+0x36>
 80004b0:	20000004 	.word	0x20000004
 80004b4:	20000000 	.word	0x20000000
 80004b8:	20000008 	.word	0x20000008

080004bc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004bc:	4a07      	ldr	r2, [pc, #28]	; (80004dc <HAL_Init+0x20>)
{
 80004be:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004c0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004c2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004c4:	f043 0310 	orr.w	r3, r3, #16
 80004c8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ca:	f000 f82d 	bl	8000528 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ce:	200f      	movs	r0, #15
 80004d0:	f7ff ffd0 	bl	8000474 <HAL_InitTick>
  HAL_MspInit();
 80004d4:	f7ff ff54 	bl	8000380 <HAL_MspInit>
}
 80004d8:	2000      	movs	r0, #0
 80004da:	bd08      	pop	{r3, pc}
 80004dc:	40022000 	.word	0x40022000

080004e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80004e0:	4a03      	ldr	r2, [pc, #12]	; (80004f0 <HAL_IncTick+0x10>)
 80004e2:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <HAL_IncTick+0x14>)
 80004e4:	6811      	ldr	r1, [r2, #0]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	440b      	add	r3, r1
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	2000008c 	.word	0x2000008c
 80004f4:	20000004 	.word	0x20000004

080004f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004f8:	4b01      	ldr	r3, [pc, #4]	; (8000500 <HAL_GetTick+0x8>)
 80004fa:	6818      	ldr	r0, [r3, #0]
}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	2000008c 	.word	0x2000008c

08000504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000504:	b538      	push	{r3, r4, r5, lr}
 8000506:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000508:	f7ff fff6 	bl	80004f8 <HAL_GetTick>
 800050c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800050e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000510:	bf1e      	ittt	ne
 8000512:	4b04      	ldrne	r3, [pc, #16]	; (8000524 <HAL_Delay+0x20>)
 8000514:	781b      	ldrbne	r3, [r3, #0]
 8000516:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000518:	f7ff ffee 	bl	80004f8 <HAL_GetTick>
 800051c:	1b43      	subs	r3, r0, r5
 800051e:	42a3      	cmp	r3, r4
 8000520:	d3fa      	bcc.n	8000518 <HAL_Delay+0x14>
  {
  }
}
 8000522:	bd38      	pop	{r3, r4, r5, pc}
 8000524:	20000004 	.word	0x20000004

08000528 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000528:	4907      	ldr	r1, [pc, #28]	; (8000548 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800052a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800052c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800052e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000532:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000536:	0412      	lsls	r2, r2, #16
 8000538:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800053a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800053c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000544:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000546:	4770      	bx	lr
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800054c:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	68dc      	ldr	r4, [r3, #12]
 8000552:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000556:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800055a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800055c:	2b04      	cmp	r3, #4
 800055e:	bf28      	it	cs
 8000560:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000562:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000564:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000568:	bf98      	it	ls
 800056a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800056c:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000570:	bf88      	it	hi
 8000572:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000574:	ea21 0303 	bic.w	r3, r1, r3
 8000578:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800057a:	fa05 f404 	lsl.w	r4, r5, r4
 800057e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000582:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000584:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000588:	bfac      	ite	ge
 800058a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800058e:	4a07      	ldrlt	r2, [pc, #28]	; (80005ac <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000590:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	bfab      	itete	ge
 8000598:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005a6:	bd30      	pop	{r4, r5, pc}
 80005a8:	e000ed00 	.word	0xe000ed00
 80005ac:	e000ed14 	.word	0xe000ed14

080005b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005b0:	3801      	subs	r0, #1
 80005b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005b6:	d20b      	bcs.n	80005d0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005bc:	21f0      	movs	r1, #240	; 0xf0
 80005be:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005c0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005c6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005c8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005ca:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005cc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005ce:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005d0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80005dc:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80005de:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005e0:	4f61      	ldr	r7, [pc, #388]	; (8000768 <HAL_GPIO_Init+0x190>)
 80005e2:	4b62      	ldr	r3, [pc, #392]	; (800076c <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 80005e4:	f8df c188 	ldr.w	ip, [pc, #392]	; 8000770 <HAL_GPIO_Init+0x198>
 80005e8:	f8df e188 	ldr.w	lr, [pc, #392]	; 8000774 <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005ec:	680d      	ldr	r5, [r1, #0]
 80005ee:	fa35 f406 	lsrs.w	r4, r5, r6
 80005f2:	d102      	bne.n	80005fa <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80005f4:	b003      	add	sp, #12
 80005f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80005fa:	f04f 0801 	mov.w	r8, #1
 80005fe:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000602:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000606:	ea38 0505 	bics.w	r5, r8, r5
 800060a:	d177      	bne.n	80006fc <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800060c:	684d      	ldr	r5, [r1, #4]
 800060e:	2d03      	cmp	r5, #3
 8000610:	d807      	bhi.n	8000622 <HAL_GPIO_Init+0x4a>
 8000612:	3d01      	subs	r5, #1
 8000614:	2d02      	cmp	r5, #2
 8000616:	f200 8082 	bhi.w	800071e <HAL_GPIO_Init+0x146>
 800061a:	e8df f005 	tbb	[pc, r5]
 800061e:	9792      	.short	0x9792
 8000620:	9d          	.byte	0x9d
 8000621:	00          	.byte	0x00
 8000622:	2d12      	cmp	r5, #18
 8000624:	f000 8095 	beq.w	8000752 <HAL_GPIO_Init+0x17a>
 8000628:	d86a      	bhi.n	8000700 <HAL_GPIO_Init+0x128>
 800062a:	2d11      	cmp	r5, #17
 800062c:	f000 808b 	beq.w	8000746 <HAL_GPIO_Init+0x16e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000630:	2cff      	cmp	r4, #255	; 0xff
 8000632:	bf98      	it	ls
 8000634:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000636:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800063a:	bf88      	it	hi
 800063c:	f100 0a04 	addhi.w	sl, r0, #4
 8000640:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000644:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000648:	bf88      	it	hi
 800064a:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800064c:	fa09 fb05 	lsl.w	fp, r9, r5
 8000650:	ea28 080b 	bic.w	r8, r8, fp
 8000654:	fa02 f505 	lsl.w	r5, r2, r5
 8000658:	ea48 0505 	orr.w	r5, r8, r5
 800065c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000660:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000664:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000668:	d048      	beq.n	80006fc <HAL_GPIO_Init+0x124>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800066a:	69bd      	ldr	r5, [r7, #24]
 800066c:	f026 0803 	bic.w	r8, r6, #3
 8000670:	f045 0501 	orr.w	r5, r5, #1
 8000674:	61bd      	str	r5, [r7, #24]
 8000676:	69bd      	ldr	r5, [r7, #24]
 8000678:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800067c:	f005 0501 	and.w	r5, r5, #1
 8000680:	9501      	str	r5, [sp, #4]
 8000682:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000686:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800068a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800068c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000690:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000694:	fa09 f90b 	lsl.w	r9, r9, fp
 8000698:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800069c:	4d36      	ldr	r5, [pc, #216]	; (8000778 <HAL_GPIO_Init+0x1a0>)
 800069e:	42a8      	cmp	r0, r5
 80006a0:	d05e      	beq.n	8000760 <HAL_GPIO_Init+0x188>
 80006a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006a6:	42a8      	cmp	r0, r5
 80006a8:	d05c      	beq.n	8000764 <HAL_GPIO_Init+0x18c>
 80006aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006ae:	42a8      	cmp	r0, r5
 80006b0:	bf0c      	ite	eq
 80006b2:	2502      	moveq	r5, #2
 80006b4:	2503      	movne	r5, #3
 80006b6:	fa05 f50b 	lsl.w	r5, r5, fp
 80006ba:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80006be:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80006c2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006c4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80006c8:	bf14      	ite	ne
 80006ca:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80006cc:	43a5      	biceq	r5, r4
 80006ce:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80006d0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006d2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80006d6:	bf14      	ite	ne
 80006d8:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80006da:	43a5      	biceq	r5, r4
 80006dc:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80006de:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006e0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80006e4:	bf14      	ite	ne
 80006e6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80006e8:	43a5      	biceq	r5, r4
 80006ea:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80006ec:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006ee:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80006f2:	bf14      	ite	ne
 80006f4:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006f6:	ea25 0404 	biceq.w	r4, r5, r4
 80006fa:	60dc      	str	r4, [r3, #12]
	position++;
 80006fc:	3601      	adds	r6, #1
 80006fe:	e775      	b.n	80005ec <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8000700:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800077c <HAL_GPIO_Init+0x1a4>
 8000704:	454d      	cmp	r5, r9
 8000706:	d00a      	beq.n	800071e <HAL_GPIO_Init+0x146>
 8000708:	d815      	bhi.n	8000736 <HAL_GPIO_Init+0x15e>
 800070a:	4575      	cmp	r5, lr
 800070c:	d007      	beq.n	800071e <HAL_GPIO_Init+0x146>
 800070e:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 8000712:	454d      	cmp	r5, r9
 8000714:	d003      	beq.n	800071e <HAL_GPIO_Init+0x146>
 8000716:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800071a:	454d      	cmp	r5, r9
 800071c:	d188      	bne.n	8000630 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800071e:	688a      	ldr	r2, [r1, #8]
 8000720:	b1e2      	cbz	r2, 800075c <HAL_GPIO_Init+0x184>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000722:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000724:	bf08      	it	eq
 8000726:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800072a:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800072e:	bf18      	it	ne
 8000730:	f8c0 8014 	strne.w	r8, [r0, #20]
 8000734:	e77c      	b.n	8000630 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8000736:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8000780 <HAL_GPIO_Init+0x1a8>
 800073a:	454d      	cmp	r5, r9
 800073c:	d0ef      	beq.n	800071e <HAL_GPIO_Init+0x146>
 800073e:	4565      	cmp	r5, ip
 8000740:	e7ec      	b.n	800071c <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000742:	68ca      	ldr	r2, [r1, #12]
          break;
 8000744:	e774      	b.n	8000630 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000746:	68ca      	ldr	r2, [r1, #12]
 8000748:	3204      	adds	r2, #4
          break;
 800074a:	e771      	b.n	8000630 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800074c:	68ca      	ldr	r2, [r1, #12]
 800074e:	3208      	adds	r2, #8
          break;
 8000750:	e76e      	b.n	8000630 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000752:	68ca      	ldr	r2, [r1, #12]
 8000754:	320c      	adds	r2, #12
          break;
 8000756:	e76b      	b.n	8000630 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8000758:	2200      	movs	r2, #0
 800075a:	e769      	b.n	8000630 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800075c:	2204      	movs	r2, #4
 800075e:	e767      	b.n	8000630 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000760:	2500      	movs	r5, #0
 8000762:	e7a8      	b.n	80006b6 <HAL_GPIO_Init+0xde>
 8000764:	2501      	movs	r5, #1
 8000766:	e7a6      	b.n	80006b6 <HAL_GPIO_Init+0xde>
 8000768:	40021000 	.word	0x40021000
 800076c:	40010400 	.word	0x40010400
 8000770:	10320000 	.word	0x10320000
 8000774:	10120000 	.word	0x10120000
 8000778:	40010800 	.word	0x40010800
 800077c:	10220000 	.word	0x10220000
 8000780:	10310000 	.word	0x10310000

08000784 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000784:	b10a      	cbz	r2, 800078a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000786:	6101      	str	r1, [r0, #16]
  }
}
 8000788:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800078a:	0409      	lsls	r1, r1, #16
 800078c:	e7fb      	b.n	8000786 <HAL_GPIO_WritePin+0x2>
	...

08000790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000790:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000794:	4605      	mov	r5, r0
 8000796:	b338      	cbz	r0, 80007e8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000798:	6803      	ldr	r3, [r0, #0]
 800079a:	07db      	lsls	r3, r3, #31
 800079c:	d410      	bmi.n	80007c0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800079e:	682b      	ldr	r3, [r5, #0]
 80007a0:	079f      	lsls	r7, r3, #30
 80007a2:	d45e      	bmi.n	8000862 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007a4:	682b      	ldr	r3, [r5, #0]
 80007a6:	0719      	lsls	r1, r3, #28
 80007a8:	f100 8095 	bmi.w	80008d6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007ac:	682b      	ldr	r3, [r5, #0]
 80007ae:	075a      	lsls	r2, r3, #29
 80007b0:	f100 80c1 	bmi.w	8000936 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007b4:	69e8      	ldr	r0, [r5, #28]
 80007b6:	2800      	cmp	r0, #0
 80007b8:	f040 812c 	bne.w	8000a14 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80007bc:	2000      	movs	r0, #0
 80007be:	e029      	b.n	8000814 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007c0:	4c90      	ldr	r4, [pc, #576]	; (8000a04 <HAL_RCC_OscConfig+0x274>)
 80007c2:	6863      	ldr	r3, [r4, #4]
 80007c4:	f003 030c 	and.w	r3, r3, #12
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	d007      	beq.n	80007dc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007cc:	6863      	ldr	r3, [r4, #4]
 80007ce:	f003 030c 	and.w	r3, r3, #12
 80007d2:	2b08      	cmp	r3, #8
 80007d4:	d10a      	bne.n	80007ec <HAL_RCC_OscConfig+0x5c>
 80007d6:	6863      	ldr	r3, [r4, #4]
 80007d8:	03de      	lsls	r6, r3, #15
 80007da:	d507      	bpl.n	80007ec <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007dc:	6823      	ldr	r3, [r4, #0]
 80007de:	039c      	lsls	r4, r3, #14
 80007e0:	d5dd      	bpl.n	800079e <HAL_RCC_OscConfig+0xe>
 80007e2:	686b      	ldr	r3, [r5, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1da      	bne.n	800079e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80007e8:	2001      	movs	r0, #1
 80007ea:	e013      	b.n	8000814 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007ec:	686b      	ldr	r3, [r5, #4]
 80007ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007f2:	d112      	bne.n	800081a <HAL_RCC_OscConfig+0x8a>
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007fc:	f7ff fe7c 	bl	80004f8 <HAL_GetTick>
 8000800:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000802:	6823      	ldr	r3, [r4, #0]
 8000804:	0398      	lsls	r0, r3, #14
 8000806:	d4ca      	bmi.n	800079e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000808:	f7ff fe76 	bl	80004f8 <HAL_GetTick>
 800080c:	1b80      	subs	r0, r0, r6
 800080e:	2864      	cmp	r0, #100	; 0x64
 8000810:	d9f7      	bls.n	8000802 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8000812:	2003      	movs	r0, #3
}
 8000814:	b002      	add	sp, #8
 8000816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800081a:	b99b      	cbnz	r3, 8000844 <HAL_RCC_OscConfig+0xb4>
 800081c:	6823      	ldr	r3, [r4, #0]
 800081e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000822:	6023      	str	r3, [r4, #0]
 8000824:	6823      	ldr	r3, [r4, #0]
 8000826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800082a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800082c:	f7ff fe64 	bl	80004f8 <HAL_GetTick>
 8000830:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000832:	6823      	ldr	r3, [r4, #0]
 8000834:	0399      	lsls	r1, r3, #14
 8000836:	d5b2      	bpl.n	800079e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000838:	f7ff fe5e 	bl	80004f8 <HAL_GetTick>
 800083c:	1b80      	subs	r0, r0, r6
 800083e:	2864      	cmp	r0, #100	; 0x64
 8000840:	d9f7      	bls.n	8000832 <HAL_RCC_OscConfig+0xa2>
 8000842:	e7e6      	b.n	8000812 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000848:	6823      	ldr	r3, [r4, #0]
 800084a:	d103      	bne.n	8000854 <HAL_RCC_OscConfig+0xc4>
 800084c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000850:	6023      	str	r3, [r4, #0]
 8000852:	e7cf      	b.n	80007f4 <HAL_RCC_OscConfig+0x64>
 8000854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000858:	6023      	str	r3, [r4, #0]
 800085a:	6823      	ldr	r3, [r4, #0]
 800085c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000860:	e7cb      	b.n	80007fa <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000862:	4c68      	ldr	r4, [pc, #416]	; (8000a04 <HAL_RCC_OscConfig+0x274>)
 8000864:	6863      	ldr	r3, [r4, #4]
 8000866:	f013 0f0c 	tst.w	r3, #12
 800086a:	d007      	beq.n	800087c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800086c:	6863      	ldr	r3, [r4, #4]
 800086e:	f003 030c 	and.w	r3, r3, #12
 8000872:	2b08      	cmp	r3, #8
 8000874:	d110      	bne.n	8000898 <HAL_RCC_OscConfig+0x108>
 8000876:	6863      	ldr	r3, [r4, #4]
 8000878:	03da      	lsls	r2, r3, #15
 800087a:	d40d      	bmi.n	8000898 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800087c:	6823      	ldr	r3, [r4, #0]
 800087e:	079b      	lsls	r3, r3, #30
 8000880:	d502      	bpl.n	8000888 <HAL_RCC_OscConfig+0xf8>
 8000882:	692b      	ldr	r3, [r5, #16]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d1af      	bne.n	80007e8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000888:	6823      	ldr	r3, [r4, #0]
 800088a:	696a      	ldr	r2, [r5, #20]
 800088c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000890:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000894:	6023      	str	r3, [r4, #0]
 8000896:	e785      	b.n	80007a4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000898:	692a      	ldr	r2, [r5, #16]
 800089a:	4b5b      	ldr	r3, [pc, #364]	; (8000a08 <HAL_RCC_OscConfig+0x278>)
 800089c:	b16a      	cbz	r2, 80008ba <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800089e:	2201      	movs	r2, #1
 80008a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008a2:	f7ff fe29 	bl	80004f8 <HAL_GetTick>
 80008a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008a8:	6823      	ldr	r3, [r4, #0]
 80008aa:	079f      	lsls	r7, r3, #30
 80008ac:	d4ec      	bmi.n	8000888 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008ae:	f7ff fe23 	bl	80004f8 <HAL_GetTick>
 80008b2:	1b80      	subs	r0, r0, r6
 80008b4:	2802      	cmp	r0, #2
 80008b6:	d9f7      	bls.n	80008a8 <HAL_RCC_OscConfig+0x118>
 80008b8:	e7ab      	b.n	8000812 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80008ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008bc:	f7ff fe1c 	bl	80004f8 <HAL_GetTick>
 80008c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008c2:	6823      	ldr	r3, [r4, #0]
 80008c4:	0798      	lsls	r0, r3, #30
 80008c6:	f57f af6d 	bpl.w	80007a4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80008ca:	f7ff fe15 	bl	80004f8 <HAL_GetTick>
 80008ce:	1b80      	subs	r0, r0, r6
 80008d0:	2802      	cmp	r0, #2
 80008d2:	d9f6      	bls.n	80008c2 <HAL_RCC_OscConfig+0x132>
 80008d4:	e79d      	b.n	8000812 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008d6:	69aa      	ldr	r2, [r5, #24]
 80008d8:	4e4a      	ldr	r6, [pc, #296]	; (8000a04 <HAL_RCC_OscConfig+0x274>)
 80008da:	4b4b      	ldr	r3, [pc, #300]	; (8000a08 <HAL_RCC_OscConfig+0x278>)
 80008dc:	b1e2      	cbz	r2, 8000918 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80008de:	2201      	movs	r2, #1
 80008e0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80008e4:	f7ff fe08 	bl	80004f8 <HAL_GetTick>
 80008e8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80008ec:	079b      	lsls	r3, r3, #30
 80008ee:	d50d      	bpl.n	800090c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80008f0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80008f4:	4b45      	ldr	r3, [pc, #276]	; (8000a0c <HAL_RCC_OscConfig+0x27c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80008fc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80008fe:	bf00      	nop
  }
  while (Delay --);
 8000900:	9b01      	ldr	r3, [sp, #4]
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	9201      	str	r2, [sp, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1f9      	bne.n	80008fe <HAL_RCC_OscConfig+0x16e>
 800090a:	e74f      	b.n	80007ac <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800090c:	f7ff fdf4 	bl	80004f8 <HAL_GetTick>
 8000910:	1b00      	subs	r0, r0, r4
 8000912:	2802      	cmp	r0, #2
 8000914:	d9e9      	bls.n	80008ea <HAL_RCC_OscConfig+0x15a>
 8000916:	e77c      	b.n	8000812 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8000918:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800091c:	f7ff fdec 	bl	80004f8 <HAL_GetTick>
 8000920:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000922:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000924:	079f      	lsls	r7, r3, #30
 8000926:	f57f af41 	bpl.w	80007ac <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800092a:	f7ff fde5 	bl	80004f8 <HAL_GetTick>
 800092e:	1b00      	subs	r0, r0, r4
 8000930:	2802      	cmp	r0, #2
 8000932:	d9f6      	bls.n	8000922 <HAL_RCC_OscConfig+0x192>
 8000934:	e76d      	b.n	8000812 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000936:	4c33      	ldr	r4, [pc, #204]	; (8000a04 <HAL_RCC_OscConfig+0x274>)
 8000938:	69e3      	ldr	r3, [r4, #28]
 800093a:	00d8      	lsls	r0, r3, #3
 800093c:	d424      	bmi.n	8000988 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800093e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000940:	69e3      	ldr	r3, [r4, #28]
 8000942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000946:	61e3      	str	r3, [r4, #28]
 8000948:	69e3      	ldr	r3, [r4, #28]
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000952:	4e2f      	ldr	r6, [pc, #188]	; (8000a10 <HAL_RCC_OscConfig+0x280>)
 8000954:	6833      	ldr	r3, [r6, #0]
 8000956:	05d9      	lsls	r1, r3, #23
 8000958:	d518      	bpl.n	800098c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800095a:	68eb      	ldr	r3, [r5, #12]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d126      	bne.n	80009ae <HAL_RCC_OscConfig+0x21e>
 8000960:	6a23      	ldr	r3, [r4, #32]
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000968:	f7ff fdc6 	bl	80004f8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800096c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000970:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000972:	6a23      	ldr	r3, [r4, #32]
 8000974:	079b      	lsls	r3, r3, #30
 8000976:	d53f      	bpl.n	80009f8 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8000978:	2f00      	cmp	r7, #0
 800097a:	f43f af1b 	beq.w	80007b4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800097e:	69e3      	ldr	r3, [r4, #28]
 8000980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000984:	61e3      	str	r3, [r4, #28]
 8000986:	e715      	b.n	80007b4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000988:	2700      	movs	r7, #0
 800098a:	e7e2      	b.n	8000952 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800098c:	6833      	ldr	r3, [r6, #0]
 800098e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000992:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000994:	f7ff fdb0 	bl	80004f8 <HAL_GetTick>
 8000998:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800099a:	6833      	ldr	r3, [r6, #0]
 800099c:	05da      	lsls	r2, r3, #23
 800099e:	d4dc      	bmi.n	800095a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009a0:	f7ff fdaa 	bl	80004f8 <HAL_GetTick>
 80009a4:	eba0 0008 	sub.w	r0, r0, r8
 80009a8:	2864      	cmp	r0, #100	; 0x64
 80009aa:	d9f6      	bls.n	800099a <HAL_RCC_OscConfig+0x20a>
 80009ac:	e731      	b.n	8000812 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ae:	b9ab      	cbnz	r3, 80009dc <HAL_RCC_OscConfig+0x24c>
 80009b0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009b2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009b6:	f023 0301 	bic.w	r3, r3, #1
 80009ba:	6223      	str	r3, [r4, #32]
 80009bc:	6a23      	ldr	r3, [r4, #32]
 80009be:	f023 0304 	bic.w	r3, r3, #4
 80009c2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80009c4:	f7ff fd98 	bl	80004f8 <HAL_GetTick>
 80009c8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009ca:	6a23      	ldr	r3, [r4, #32]
 80009cc:	0798      	lsls	r0, r3, #30
 80009ce:	d5d3      	bpl.n	8000978 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009d0:	f7ff fd92 	bl	80004f8 <HAL_GetTick>
 80009d4:	1b80      	subs	r0, r0, r6
 80009d6:	4540      	cmp	r0, r8
 80009d8:	d9f7      	bls.n	80009ca <HAL_RCC_OscConfig+0x23a>
 80009da:	e71a      	b.n	8000812 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009dc:	2b05      	cmp	r3, #5
 80009de:	6a23      	ldr	r3, [r4, #32]
 80009e0:	d103      	bne.n	80009ea <HAL_RCC_OscConfig+0x25a>
 80009e2:	f043 0304 	orr.w	r3, r3, #4
 80009e6:	6223      	str	r3, [r4, #32]
 80009e8:	e7ba      	b.n	8000960 <HAL_RCC_OscConfig+0x1d0>
 80009ea:	f023 0301 	bic.w	r3, r3, #1
 80009ee:	6223      	str	r3, [r4, #32]
 80009f0:	6a23      	ldr	r3, [r4, #32]
 80009f2:	f023 0304 	bic.w	r3, r3, #4
 80009f6:	e7b6      	b.n	8000966 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009f8:	f7ff fd7e 	bl	80004f8 <HAL_GetTick>
 80009fc:	1b80      	subs	r0, r0, r6
 80009fe:	4540      	cmp	r0, r8
 8000a00:	d9b7      	bls.n	8000972 <HAL_RCC_OscConfig+0x1e2>
 8000a02:	e706      	b.n	8000812 <HAL_RCC_OscConfig+0x82>
 8000a04:	40021000 	.word	0x40021000
 8000a08:	42420000 	.word	0x42420000
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a14:	4c2a      	ldr	r4, [pc, #168]	; (8000ac0 <HAL_RCC_OscConfig+0x330>)
 8000a16:	6863      	ldr	r3, [r4, #4]
 8000a18:	f003 030c 	and.w	r3, r3, #12
 8000a1c:	2b08      	cmp	r3, #8
 8000a1e:	d03e      	beq.n	8000a9e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a20:	2200      	movs	r2, #0
 8000a22:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <HAL_RCC_OscConfig+0x334>)
 8000a24:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000a26:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a28:	d12c      	bne.n	8000a84 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000a2a:	f7ff fd65 	bl	80004f8 <HAL_GetTick>
 8000a2e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a30:	6823      	ldr	r3, [r4, #0]
 8000a32:	0199      	lsls	r1, r3, #6
 8000a34:	d420      	bmi.n	8000a78 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000a36:	6a2b      	ldr	r3, [r5, #32]
 8000a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a3c:	d105      	bne.n	8000a4a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a3e:	6862      	ldr	r2, [r4, #4]
 8000a40:	68a9      	ldr	r1, [r5, #8]
 8000a42:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000a46:	430a      	orrs	r2, r1
 8000a48:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a4a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000a4c:	6862      	ldr	r2, [r4, #4]
 8000a4e:	430b      	orrs	r3, r1
 8000a50:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000a54:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8000a56:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a58:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <HAL_RCC_OscConfig+0x334>)
 8000a5c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000a5e:	f7ff fd4b 	bl	80004f8 <HAL_GetTick>
 8000a62:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a64:	6823      	ldr	r3, [r4, #0]
 8000a66:	019a      	lsls	r2, r3, #6
 8000a68:	f53f aea8 	bmi.w	80007bc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a6c:	f7ff fd44 	bl	80004f8 <HAL_GetTick>
 8000a70:	1b40      	subs	r0, r0, r5
 8000a72:	2802      	cmp	r0, #2
 8000a74:	d9f6      	bls.n	8000a64 <HAL_RCC_OscConfig+0x2d4>
 8000a76:	e6cc      	b.n	8000812 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a78:	f7ff fd3e 	bl	80004f8 <HAL_GetTick>
 8000a7c:	1b80      	subs	r0, r0, r6
 8000a7e:	2802      	cmp	r0, #2
 8000a80:	d9d6      	bls.n	8000a30 <HAL_RCC_OscConfig+0x2a0>
 8000a82:	e6c6      	b.n	8000812 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000a84:	f7ff fd38 	bl	80004f8 <HAL_GetTick>
 8000a88:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a8a:	6823      	ldr	r3, [r4, #0]
 8000a8c:	019b      	lsls	r3, r3, #6
 8000a8e:	f57f ae95 	bpl.w	80007bc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a92:	f7ff fd31 	bl	80004f8 <HAL_GetTick>
 8000a96:	1b40      	subs	r0, r0, r5
 8000a98:	2802      	cmp	r0, #2
 8000a9a:	d9f6      	bls.n	8000a8a <HAL_RCC_OscConfig+0x2fa>
 8000a9c:	e6b9      	b.n	8000812 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000a9e:	2801      	cmp	r0, #1
 8000aa0:	f43f aeb8 	beq.w	8000814 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8000aa4:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000aa6:	6a2a      	ldr	r2, [r5, #32]
 8000aa8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000aac:	4291      	cmp	r1, r2
 8000aae:	f47f ae9b 	bne.w	80007e8 <HAL_RCC_OscConfig+0x58>
 8000ab2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ab4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	f43f ae7f 	beq.w	80007bc <HAL_RCC_OscConfig+0x2c>
 8000abe:	e693      	b.n	80007e8 <HAL_RCC_OscConfig+0x58>
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	42420000 	.word	0x42420000

08000ac8 <HAL_RCC_GetSysClockFreq>:
{
 8000ac8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000acc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ace:	ac02      	add	r4, sp, #8
 8000ad0:	f103 0510 	add.w	r5, r3, #16
 8000ad4:	4622      	mov	r2, r4
 8000ad6:	6818      	ldr	r0, [r3, #0]
 8000ad8:	6859      	ldr	r1, [r3, #4]
 8000ada:	3308      	adds	r3, #8
 8000adc:	c203      	stmia	r2!, {r0, r1}
 8000ade:	42ab      	cmp	r3, r5
 8000ae0:	4614      	mov	r4, r2
 8000ae2:	d1f7      	bne.n	8000ad4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ae4:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8000ae8:	4911      	ldr	r1, [pc, #68]	; (8000b30 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000aea:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000aee:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000af0:	f003 020c 	and.w	r2, r3, #12
 8000af4:	2a08      	cmp	r2, #8
 8000af6:	d117      	bne.n	8000b28 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000af8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000afc:	3218      	adds	r2, #24
 8000afe:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b00:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b02:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b06:	d50c      	bpl.n	8000b22 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b08:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b0c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b10:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b12:	3318      	adds	r3, #24
 8000b14:	446b      	add	r3, sp
 8000b16:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000b1a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000b1e:	b007      	add	sp, #28
 8000b20:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_RCC_GetSysClockFreq+0x70>)
 8000b24:	4358      	muls	r0, r3
 8000b26:	e7fa      	b.n	8000b1e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8000b2a:	e7f8      	b.n	8000b1e <HAL_RCC_GetSysClockFreq+0x56>
 8000b2c:	080013af 	.word	0x080013af
 8000b30:	40021000 	.word	0x40021000
 8000b34:	007a1200 	.word	0x007a1200
 8000b38:	003d0900 	.word	0x003d0900

08000b3c <HAL_RCC_ClockConfig>:
{
 8000b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b40:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000b42:	4604      	mov	r4, r0
 8000b44:	b910      	cbnz	r0, 8000b4c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b46:	2001      	movs	r0, #1
}
 8000b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000b4c:	4a44      	ldr	r2, [pc, #272]	; (8000c60 <HAL_RCC_ClockConfig+0x124>)
 8000b4e:	6813      	ldr	r3, [r2, #0]
 8000b50:	f003 0307 	and.w	r3, r3, #7
 8000b54:	428b      	cmp	r3, r1
 8000b56:	d328      	bcc.n	8000baa <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b58:	6821      	ldr	r1, [r4, #0]
 8000b5a:	078e      	lsls	r6, r1, #30
 8000b5c:	d430      	bmi.n	8000bc0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b5e:	07ca      	lsls	r2, r1, #31
 8000b60:	d443      	bmi.n	8000bea <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000b62:	4a3f      	ldr	r2, [pc, #252]	; (8000c60 <HAL_RCC_ClockConfig+0x124>)
 8000b64:	6813      	ldr	r3, [r2, #0]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	42ab      	cmp	r3, r5
 8000b6c:	d865      	bhi.n	8000c3a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b6e:	6822      	ldr	r2, [r4, #0]
 8000b70:	4d3c      	ldr	r5, [pc, #240]	; (8000c64 <HAL_RCC_ClockConfig+0x128>)
 8000b72:	f012 0f04 	tst.w	r2, #4
 8000b76:	d16c      	bne.n	8000c52 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b78:	0713      	lsls	r3, r2, #28
 8000b7a:	d506      	bpl.n	8000b8a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b7c:	686b      	ldr	r3, [r5, #4]
 8000b7e:	6922      	ldr	r2, [r4, #16]
 8000b80:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b84:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b88:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000b8a:	f7ff ff9d 	bl	8000ac8 <HAL_RCC_GetSysClockFreq>
 8000b8e:	686b      	ldr	r3, [r5, #4]
 8000b90:	4a35      	ldr	r2, [pc, #212]	; (8000c68 <HAL_RCC_ClockConfig+0x12c>)
 8000b92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b96:	5cd3      	ldrb	r3, [r2, r3]
 8000b98:	40d8      	lsrs	r0, r3
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <HAL_RCC_ClockConfig+0x130>)
 8000b9c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000b9e:	4b34      	ldr	r3, [pc, #208]	; (8000c70 <HAL_RCC_ClockConfig+0x134>)
 8000ba0:	6818      	ldr	r0, [r3, #0]
 8000ba2:	f7ff fc67 	bl	8000474 <HAL_InitTick>
  return HAL_OK;
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	e7ce      	b.n	8000b48 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000baa:	6813      	ldr	r3, [r2, #0]
 8000bac:	f023 0307 	bic.w	r3, r3, #7
 8000bb0:	430b      	orrs	r3, r1
 8000bb2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bb4:	6813      	ldr	r3, [r2, #0]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	428b      	cmp	r3, r1
 8000bbc:	d1c3      	bne.n	8000b46 <HAL_RCC_ClockConfig+0xa>
 8000bbe:	e7cb      	b.n	8000b58 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bc0:	4b28      	ldr	r3, [pc, #160]	; (8000c64 <HAL_RCC_ClockConfig+0x128>)
 8000bc2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bc6:	bf1e      	ittt	ne
 8000bc8:	685a      	ldrne	r2, [r3, #4]
 8000bca:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000bce:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bd0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bd2:	bf42      	ittt	mi
 8000bd4:	685a      	ldrmi	r2, [r3, #4]
 8000bd6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000bda:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	68a0      	ldr	r0, [r4, #8]
 8000be0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000be4:	4302      	orrs	r2, r0
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	e7b9      	b.n	8000b5e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bea:	6862      	ldr	r2, [r4, #4]
 8000bec:	4e1d      	ldr	r6, [pc, #116]	; (8000c64 <HAL_RCC_ClockConfig+0x128>)
 8000bee:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bf2:	d11a      	bne.n	8000c2a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf8:	d0a5      	beq.n	8000b46 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bfa:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bfc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c00:	f023 0303 	bic.w	r3, r3, #3
 8000c04:	4313      	orrs	r3, r2
 8000c06:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000c08:	f7ff fc76 	bl	80004f8 <HAL_GetTick>
 8000c0c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c0e:	6873      	ldr	r3, [r6, #4]
 8000c10:	6862      	ldr	r2, [r4, #4]
 8000c12:	f003 030c 	and.w	r3, r3, #12
 8000c16:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c1a:	d0a2      	beq.n	8000b62 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c1c:	f7ff fc6c 	bl	80004f8 <HAL_GetTick>
 8000c20:	1bc0      	subs	r0, r0, r7
 8000c22:	4540      	cmp	r0, r8
 8000c24:	d9f3      	bls.n	8000c0e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8000c26:	2003      	movs	r0, #3
 8000c28:	e78e      	b.n	8000b48 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c2a:	2a02      	cmp	r2, #2
 8000c2c:	d102      	bne.n	8000c34 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c2e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c32:	e7e1      	b.n	8000bf8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c34:	f013 0f02 	tst.w	r3, #2
 8000c38:	e7de      	b.n	8000bf8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c3a:	6813      	ldr	r3, [r2, #0]
 8000c3c:	f023 0307 	bic.w	r3, r3, #7
 8000c40:	432b      	orrs	r3, r5
 8000c42:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c44:	6813      	ldr	r3, [r2, #0]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	42ab      	cmp	r3, r5
 8000c4c:	f47f af7b 	bne.w	8000b46 <HAL_RCC_ClockConfig+0xa>
 8000c50:	e78d      	b.n	8000b6e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c52:	686b      	ldr	r3, [r5, #4]
 8000c54:	68e1      	ldr	r1, [r4, #12]
 8000c56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c5a:	430b      	orrs	r3, r1
 8000c5c:	606b      	str	r3, [r5, #4]
 8000c5e:	e78b      	b.n	8000b78 <HAL_RCC_ClockConfig+0x3c>
 8000c60:	40022000 	.word	0x40022000
 8000c64:	40021000 	.word	0x40021000
 8000c68:	0800139f 	.word	0x0800139f
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000008 	.word	0x20000008

08000c74 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000c74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000c78:	461c      	mov	r4, r3
 8000c7a:	4616      	mov	r6, r2
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8000c80:	f7ff fc3a 	bl	80004f8 <HAL_GetTick>
 8000c84:	4434      	add	r4, r6
 8000c86:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8000c88:	f7ff fc36 	bl	80004f8 <HAL_GetTick>
 8000c8c:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8000c8e:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8000c96:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000c98:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8000c9a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000c9c:	6893      	ldr	r3, [r2, #8]
 8000c9e:	ea37 0303 	bics.w	r3, r7, r3
 8000ca2:	d001      	beq.n	8000ca8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	e02e      	b.n	8000d06 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8000ca8:	1c73      	adds	r3, r6, #1
 8000caa:	d0f7      	beq.n	8000c9c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8000cac:	f7ff fc24 	bl	80004f8 <HAL_GetTick>
 8000cb0:	eba0 0008 	sub.w	r0, r0, r8
 8000cb4:	42a0      	cmp	r0, r4
 8000cb6:	d329      	bcc.n	8000d0c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000cb8:	682b      	ldr	r3, [r5, #0]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000cc0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000cc2:	686a      	ldr	r2, [r5, #4]
 8000cc4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000cc8:	d10a      	bne.n	8000ce0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8000cca:	68aa      	ldr	r2, [r5, #8]
 8000ccc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000cd0:	d002      	beq.n	8000cd8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000cd2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000cd6:	d103      	bne.n	8000ce0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cde:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ce0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000ce2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000ce6:	d107      	bne.n	8000cf8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000cf6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000cfe:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8000d00:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8000d02:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8000d06:	b002      	add	sp, #8
 8000d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8000d0c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8000d0e:	2b00      	cmp	r3, #0
      count--;
 8000d10:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8000d12:	bf08      	it	eq
 8000d14:	2400      	moveq	r4, #0
      count--;
 8000d16:	3b01      	subs	r3, #1
 8000d18:	e7be      	b.n	8000c98 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8000d1a:	bf00      	nop
 8000d1c:	20000000 	.word	0x20000000

08000d20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000d20:	b510      	push	{r4, lr}
 8000d22:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000d24:	460a      	mov	r2, r1
 8000d26:	2180      	movs	r1, #128	; 0x80
{
 8000d28:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000d2a:	f7ff ffa3 	bl	8000c74 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8000d2e:	b120      	cbz	r0, 8000d3a <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000d30:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000d32:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d34:	f043 0320 	orr.w	r3, r3, #32
 8000d38:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000d3a:	bd10      	pop	{r4, pc}

08000d3c <HAL_SPI_Init>:
{
 8000d3c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000d3e:	4604      	mov	r4, r0
 8000d40:	2800      	cmp	r0, #0
 8000d42:	d051      	beq.n	8000de8 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8000d44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d14a      	bne.n	8000de0 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000d4a:	6842      	ldr	r2, [r0, #4]
 8000d4c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000d50:	d000      	beq.n	8000d54 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d52:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000d58:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8000d5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d60:	b923      	cbnz	r3, 8000d6c <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8000d62:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8000d64:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000d68:	f7ff fb22 	bl	80003b0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d6c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000d6e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d70:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000d74:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000d76:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d7c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000d7e:	6863      	ldr	r3, [r4, #4]
 8000d80:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8000d84:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8000d88:	4303      	orrs	r3, r0
 8000d8a:	68e0      	ldr	r0, [r4, #12]
 8000d8c:	69a1      	ldr	r1, [r4, #24]
 8000d8e:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8000d92:	4303      	orrs	r3, r0
 8000d94:	6920      	ldr	r0, [r4, #16]
 8000d96:	f000 0002 	and.w	r0, r0, #2
 8000d9a:	4303      	orrs	r3, r0
 8000d9c:	6960      	ldr	r0, [r4, #20]
 8000d9e:	f000 0001 	and.w	r0, r0, #1
 8000da2:	4303      	orrs	r3, r0
 8000da4:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8000da8:	4303      	orrs	r3, r0
 8000daa:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000dac:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000dae:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8000db2:	4303      	orrs	r3, r0
 8000db4:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000db6:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8000dba:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8000dbe:	4303      	orrs	r3, r0
 8000dc0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000dc2:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8000dc6:	4303      	orrs	r3, r0
 8000dc8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000dca:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000dcc:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dce:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000dd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dd4:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000dd6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000dd8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000dda:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8000dde:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8000de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000de6:	e7b5      	b.n	8000d54 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8000de8:	2001      	movs	r0, #1
 8000dea:	e7f8      	b.n	8000dde <HAL_SPI_Init+0xa2>

08000dec <HAL_SPI_Transmit>:
{
 8000dec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000df0:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000df2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000df6:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000df8:	2b01      	cmp	r3, #1
{
 8000dfa:	460d      	mov	r5, r1
 8000dfc:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8000dfe:	f000 80a0 	beq.w	8000f42 <HAL_SPI_Transmit+0x156>
 8000e02:	2301      	movs	r3, #1
 8000e04:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000e08:	f7ff fb76 	bl	80004f8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8000e0c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000e10:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	b2d8      	uxtb	r0, r3
 8000e16:	f040 8092 	bne.w	8000f3e <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8000e1a:	2d00      	cmp	r5, #0
 8000e1c:	d05d      	beq.n	8000eda <HAL_SPI_Transmit+0xee>
 8000e1e:	2f00      	cmp	r7, #0
 8000e20:	d05b      	beq.n	8000eda <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000e22:	2303      	movs	r3, #3
 8000e24:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e28:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e2a:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e2c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e2e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxISR       = NULL;
 8000e32:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8000e36:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000e38:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8000e3a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000e3c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000e3e:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 8000e40:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8000e42:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e44:	d107      	bne.n	8000e56 <HAL_SPI_Transmit+0x6a>
    __HAL_SPI_DISABLE(hspi);
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e54:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000e56:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000e58:	68e1      	ldr	r1, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000e5a:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000e5c:	bf5e      	ittt	pl
 8000e5e:	681a      	ldrpl	r2, [r3, #0]
 8000e60:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000e64:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000e66:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000e6a:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000e6c:	d141      	bne.n	8000ef2 <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000e6e:	b10a      	cbz	r2, 8000e74 <HAL_SPI_Transmit+0x88>
 8000e70:	2f01      	cmp	r7, #1
 8000e72:	d107      	bne.n	8000e84 <HAL_SPI_Transmit+0x98>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000e74:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000e78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000e7a:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000e7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000e84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b9a3      	cbnz	r3, 8000eb4 <HAL_SPI_Transmit+0xc8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000e8a:	4642      	mov	r2, r8
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f7ff ff46 	bl	8000d20 <SPI_EndRxTxTransaction>
 8000e94:	2800      	cmp	r0, #0
 8000e96:	d14f      	bne.n	8000f38 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000e98:	68a3      	ldr	r3, [r4, #8]
 8000e9a:	b933      	cbnz	r3, 8000eaa <HAL_SPI_Transmit+0xbe>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	9201      	str	r2, [sp, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000eaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000eac:	3800      	subs	r0, #0
 8000eae:	bf18      	it	ne
 8000eb0:	2001      	movne	r0, #1
error:
 8000eb2:	e012      	b.n	8000eda <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000eb4:	6822      	ldr	r2, [r4, #0]
 8000eb6:	6893      	ldr	r3, [r2, #8]
 8000eb8:	0798      	lsls	r0, r3, #30
 8000eba:	d505      	bpl.n	8000ec8 <HAL_SPI_Transmit+0xdc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000ebc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ebe:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000ec2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000ec4:	6323      	str	r3, [r4, #48]	; 0x30
 8000ec6:	e7d9      	b.n	8000e7c <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000ec8:	f7ff fb16 	bl	80004f8 <HAL_GetTick>
 8000ecc:	eba0 0008 	sub.w	r0, r0, r8
 8000ed0:	42b0      	cmp	r0, r6
 8000ed2:	d30b      	bcc.n	8000eec <HAL_SPI_Transmit+0x100>
 8000ed4:	1c71      	adds	r1, r6, #1
 8000ed6:	d0d5      	beq.n	8000e84 <HAL_SPI_Transmit+0x98>
          errorcode = HAL_TIMEOUT;
 8000ed8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000eda:	2301      	movs	r3, #1
 8000edc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000ee6:	b002      	add	sp, #8
 8000ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d1c9      	bne.n	8000e84 <HAL_SPI_Transmit+0x98>
 8000ef0:	e7f2      	b.n	8000ed8 <HAL_SPI_Transmit+0xec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000ef2:	b10a      	cbz	r2, 8000ef8 <HAL_SPI_Transmit+0x10c>
 8000ef4:	2f01      	cmp	r7, #1
 8000ef6:	d108      	bne.n	8000f0a <HAL_SPI_Transmit+0x11e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000ef8:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000efa:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000efc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000efe:	3301      	adds	r3, #1
 8000f00:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000f02:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000f0a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0bb      	beq.n	8000e8a <HAL_SPI_Transmit+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000f12:	6823      	ldr	r3, [r4, #0]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	0792      	lsls	r2, r2, #30
 8000f18:	d502      	bpl.n	8000f20 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000f1a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f1c:	7812      	ldrb	r2, [r2, #0]
 8000f1e:	e7ec      	b.n	8000efa <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000f20:	f7ff faea 	bl	80004f8 <HAL_GetTick>
 8000f24:	eba0 0008 	sub.w	r0, r0, r8
 8000f28:	42b0      	cmp	r0, r6
 8000f2a:	d302      	bcc.n	8000f32 <HAL_SPI_Transmit+0x146>
 8000f2c:	1c73      	adds	r3, r6, #1
 8000f2e:	d0ec      	beq.n	8000f0a <HAL_SPI_Transmit+0x11e>
 8000f30:	e7d2      	b.n	8000ed8 <HAL_SPI_Transmit+0xec>
 8000f32:	2e00      	cmp	r6, #0
 8000f34:	d1e9      	bne.n	8000f0a <HAL_SPI_Transmit+0x11e>
 8000f36:	e7cf      	b.n	8000ed8 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f38:	2320      	movs	r3, #32
 8000f3a:	6563      	str	r3, [r4, #84]	; 0x54
 8000f3c:	e7ac      	b.n	8000e98 <HAL_SPI_Transmit+0xac>
    errorcode = HAL_BUSY;
 8000f3e:	2002      	movs	r0, #2
 8000f40:	e7cb      	b.n	8000eda <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8000f42:	2002      	movs	r0, #2
 8000f44:	e7cf      	b.n	8000ee6 <HAL_SPI_Transmit+0xfa>
	...

08000f48 <send_byte>:
	RST_PIN(DC_PORT, DC);
	send_byte(cmd);
	SET_PIN(DC_PORT, DC);
}

static void send_byte(uint8_t byte){
 8000f48:	b513      	push	{r0, r1, r4, lr}
	RST_PIN(CS_PORT, CS);
 8000f4a:	4c0b      	ldr	r4, [pc, #44]	; (8000f78 <send_byte+0x30>)
static void send_byte(uint8_t byte){
 8000f4c:	f88d 0007 	strb.w	r0, [sp, #7]
	RST_PIN(CS_PORT, CS);
 8000f50:	68e3      	ldr	r3, [r4, #12]
	HAL_SPI_Transmit(spi_ptr, &byte, 1, 1000);
 8000f52:	480a      	ldr	r0, [pc, #40]	; (8000f7c <send_byte+0x34>)
	RST_PIN(CS_PORT, CS);
 8000f54:	f023 0304 	bic.w	r3, r3, #4
 8000f58:	60e3      	str	r3, [r4, #12]
	HAL_SPI_Transmit(spi_ptr, &byte, 1, 1000);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f60:	f10d 0107 	add.w	r1, sp, #7
 8000f64:	6800      	ldr	r0, [r0, #0]
 8000f66:	f7ff ff41 	bl	8000dec <HAL_SPI_Transmit>
	SET_PIN(CS_PORT, CS);
 8000f6a:	68e3      	ldr	r3, [r4, #12]
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	60e3      	str	r3, [r4, #12]
}
 8000f72:	b002      	add	sp, #8
 8000f74:	bd10      	pop	{r4, pc}
 8000f76:	bf00      	nop
 8000f78:	40010800 	.word	0x40010800
 8000f7c:	20000094 	.word	0x20000094

08000f80 <send_command>:
static void send_command(uint8_t cmd){
 8000f80:	b510      	push	{r4, lr}
	RST_PIN(DC_PORT, DC);
 8000f82:	4c06      	ldr	r4, [pc, #24]	; (8000f9c <send_command+0x1c>)
 8000f84:	68e3      	ldr	r3, [r4, #12]
 8000f86:	f023 0302 	bic.w	r3, r3, #2
 8000f8a:	60e3      	str	r3, [r4, #12]
	send_byte(cmd);
 8000f8c:	f7ff ffdc 	bl	8000f48 <send_byte>
	SET_PIN(DC_PORT, DC);
 8000f90:	68e3      	ldr	r3, [r4, #12]
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	60e3      	str	r3, [r4, #12]
}
 8000f98:	bd10      	pop	{r4, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40010800 	.word	0x40010800

08000fa0 <send_data>:

static void send_data(uint8_t buff[], uint16_t size){
 8000fa0:	460a      	mov	r2, r1
	HAL_SPI_Transmit(spi_ptr, buff, size, 1000);
 8000fa2:	4601      	mov	r1, r0
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <send_data+0x10>)
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	6800      	ldr	r0, [r0, #0]
 8000fac:	f7ff bf1e 	b.w	8000dec <HAL_SPI_Transmit>
 8000fb0:	20000094 	.word	0x20000094

08000fb4 <send_pixelVal>:
}

static void send_pixelVal(Colors_t color){
 8000fb4:	b513      	push	{r0, r1, r4, lr}
	uint8_t buff[2]={(color>>8), color&0xFF};
 8000fb6:	0a03      	lsrs	r3, r0, #8
	RST_PIN(CS_PORT, CS);
 8000fb8:	4c09      	ldr	r4, [pc, #36]	; (8000fe0 <send_pixelVal+0x2c>)
	uint8_t buff[2]={(color>>8), color&0xFF};
 8000fba:	f88d 0005 	strb.w	r0, [sp, #5]
 8000fbe:	f88d 3004 	strb.w	r3, [sp, #4]
	RST_PIN(CS_PORT, CS);
 8000fc2:	68e3      	ldr	r3, [r4, #12]
	send_data(buff, 2);
 8000fc4:	2102      	movs	r1, #2
	RST_PIN(CS_PORT, CS);
 8000fc6:	f023 0304 	bic.w	r3, r3, #4
 8000fca:	60e3      	str	r3, [r4, #12]
	send_data(buff, 2);
 8000fcc:	a801      	add	r0, sp, #4
 8000fce:	f7ff ffe7 	bl	8000fa0 <send_data>
	SET_PIN(CS_PORT, CS);
 8000fd2:	68e3      	ldr	r3, [r4, #12]
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	60e3      	str	r3, [r4, #12]
}
 8000fda:	b002      	add	sp, #8
 8000fdc:	bd10      	pop	{r4, pc}
 8000fde:	bf00      	nop
 8000fe0:	40010800 	.word	0x40010800

08000fe4 <ST7735_TFT_setXBoundary>:
void ST7735_TFT_setXBoundary(uint8_t x_start, uint8_t x_end){
 8000fe4:	b538      	push	{r3, r4, r5, lr}
	x.start = x_start;
 8000fe6:	4d0a      	ldr	r5, [pc, #40]	; (8001010 <ST7735_TFT_setXBoundary+0x2c>)
	RST_PIN(CS_PORT, CS);
 8000fe8:	4c0a      	ldr	r4, [pc, #40]	; (8001014 <ST7735_TFT_setXBoundary+0x30>)
	x.start = x_start;
 8000fea:	7068      	strb	r0, [r5, #1]
	send_command(CASET);
 8000fec:	202a      	movs	r0, #42	; 0x2a
	x.end = x_end;
 8000fee:	70e9      	strb	r1, [r5, #3]
	send_command(CASET);
 8000ff0:	f7ff ffc6 	bl	8000f80 <send_command>
	RST_PIN(CS_PORT, CS);
 8000ff4:	68e3      	ldr	r3, [r4, #12]
	send_data(x.reg_val, 4);
 8000ff6:	2104      	movs	r1, #4
	RST_PIN(CS_PORT, CS);
 8000ff8:	f023 0304 	bic.w	r3, r3, #4
 8000ffc:	60e3      	str	r3, [r4, #12]
	send_data(x.reg_val, 4);
 8000ffe:	4628      	mov	r0, r5
 8001000:	f7ff ffce 	bl	8000fa0 <send_data>
	SET_PIN(CS_PORT, CS);
 8001004:	68e3      	ldr	r3, [r4, #12]
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	60e3      	str	r3, [r4, #12]
}
 800100c:	bd38      	pop	{r3, r4, r5, pc}
 800100e:	bf00      	nop
 8001010:	2000000f 	.word	0x2000000f
 8001014:	40010800 	.word	0x40010800

08001018 <ST7735_TFT_setYBoundary>:
void ST7735_TFT_setYBoundary(uint8_t y_start, uint8_t y_end){
 8001018:	b538      	push	{r3, r4, r5, lr}
	y.start = y_start;
 800101a:	4d0a      	ldr	r5, [pc, #40]	; (8001044 <ST7735_TFT_setYBoundary+0x2c>)
	RST_PIN(CS_PORT, CS);
 800101c:	4c0a      	ldr	r4, [pc, #40]	; (8001048 <ST7735_TFT_setYBoundary+0x30>)
	y.start = y_start;
 800101e:	7068      	strb	r0, [r5, #1]
	send_command(RASET);
 8001020:	202b      	movs	r0, #43	; 0x2b
	y.end = y_end;
 8001022:	70e9      	strb	r1, [r5, #3]
	send_command(RASET);
 8001024:	f7ff ffac 	bl	8000f80 <send_command>
	RST_PIN(CS_PORT, CS);
 8001028:	68e3      	ldr	r3, [r4, #12]
	send_data(y.reg_val, 4);
 800102a:	2104      	movs	r1, #4
	RST_PIN(CS_PORT, CS);
 800102c:	f023 0304 	bic.w	r3, r3, #4
 8001030:	60e3      	str	r3, [r4, #12]
	send_data(y.reg_val, 4);
 8001032:	4628      	mov	r0, r5
 8001034:	f7ff ffb4 	bl	8000fa0 <send_data>
	SET_PIN(CS_PORT, CS);
 8001038:	68e3      	ldr	r3, [r4, #12]
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	60e3      	str	r3, [r4, #12]
}
 8001040:	bd38      	pop	{r3, r4, r5, pc}
 8001042:	bf00      	nop
 8001044:	20000013 	.word	0x20000013
 8001048:	40010800 	.word	0x40010800

0800104c <ST7735_TFT_setWindow>:
void ST7735_TFT_setWindow(uint8_t x_start, uint8_t x_end, uint8_t y_start, uint8_t y_end){
 800104c:	b538      	push	{r3, r4, r5, lr}
 800104e:	4614      	mov	r4, r2
 8001050:	461d      	mov	r5, r3
	ST7735_TFT_setXBoundary(x_start, x_end);
 8001052:	f7ff ffc7 	bl	8000fe4 <ST7735_TFT_setXBoundary>
	ST7735_TFT_setYBoundary(y_start, y_end);
 8001056:	4629      	mov	r1, r5
 8001058:	4620      	mov	r0, r4
}
 800105a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ST7735_TFT_setYBoundary(y_start, y_end);
 800105e:	f7ff bfdb 	b.w	8001018 <ST7735_TFT_setYBoundary>

08001062 <ST7735_TFT_setColorMod>:
void ST7735_TFT_setColorMod(COLMOD_arg_t colmod){
 8001062:	b510      	push	{r4, lr}
 8001064:	4604      	mov	r4, r0
	send_command(COLMOD);
 8001066:	203a      	movs	r0, #58	; 0x3a
 8001068:	f7ff ff8a 	bl	8000f80 <send_command>
	send_byte(colmod);
 800106c:	4620      	mov	r0, r4
}
 800106e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	send_byte(colmod);
 8001072:	f7ff bf69 	b.w	8000f48 <send_byte>
	...

08001078 <ST7735_TFT_init>:
void ST7735_TFT_init(SPI_HandleTypeDef *hspi_ptr){
 8001078:	b510      	push	{r4, lr}
	spi_ptr = hspi_ptr;
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <ST7735_TFT_init+0x6c>)
	SET_PIN(CS_PORT,CS);
 800107c:	4c1a      	ldr	r4, [pc, #104]	; (80010e8 <ST7735_TFT_init+0x70>)
	spi_ptr = hspi_ptr;
 800107e:	6018      	str	r0, [r3, #0]
	SET_PIN(CS_PORT,CS);
 8001080:	68e3      	ldr	r3, [r4, #12]
	HAL_Delay(5);
 8001082:	2005      	movs	r0, #5
	SET_PIN(CS_PORT,CS);
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	60e3      	str	r3, [r4, #12]
	SET_PIN(RST_PORT,RST);
 800108a:	68e3      	ldr	r3, [r4, #12]
 800108c:	f043 0308 	orr.w	r3, r3, #8
 8001090:	60e3      	str	r3, [r4, #12]
	SET_PIN(DC_PORT,DC);
 8001092:	68e3      	ldr	r3, [r4, #12]
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	60e3      	str	r3, [r4, #12]
	RST_PIN(RST_PORT, RST);
 800109a:	68e3      	ldr	r3, [r4, #12]
 800109c:	f023 0308 	bic.w	r3, r3, #8
 80010a0:	60e3      	str	r3, [r4, #12]
	HAL_Delay(5);
 80010a2:	f7ff fa2f 	bl	8000504 <HAL_Delay>
	SET_PIN(RST_PORT, RST);
 80010a6:	68e3      	ldr	r3, [r4, #12]
	HAL_Delay(200); //after max 120ms resetting cancel occurs
 80010a8:	20c8      	movs	r0, #200	; 0xc8
	SET_PIN(RST_PORT, RST);
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	60e3      	str	r3, [r4, #12]
	HAL_Delay(200); //after max 120ms resetting cancel occurs
 80010b0:	f7ff fa28 	bl	8000504 <HAL_Delay>
	send_command(SLPOUT);
 80010b4:	2011      	movs	r0, #17
 80010b6:	f7ff ff63 	bl	8000f80 <send_command>
	send_command(DISPON);
 80010ba:	2029      	movs	r0, #41	; 0x29
 80010bc:	f7ff ff60 	bl	8000f80 <send_command>
	HAL_Delay(300);
 80010c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010c4:	f7ff fa1e 	bl	8000504 <HAL_Delay>
	ST7735_TFT_setColorMod(BitPerPixel_16);
 80010c8:	2005      	movs	r0, #5
 80010ca:	f7ff ffca 	bl	8001062 <ST7735_TFT_setColorMod>
}
 80010ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ST7735_TFT_setWindow(x.start, x.end, y.start, y.end);
 80010d2:	4a06      	ldr	r2, [pc, #24]	; (80010ec <ST7735_TFT_init+0x74>)
 80010d4:	4806      	ldr	r0, [pc, #24]	; (80010f0 <ST7735_TFT_init+0x78>)
 80010d6:	78d3      	ldrb	r3, [r2, #3]
 80010d8:	78c1      	ldrb	r1, [r0, #3]
 80010da:	7852      	ldrb	r2, [r2, #1]
 80010dc:	7840      	ldrb	r0, [r0, #1]
 80010de:	f7ff bfb5 	b.w	800104c <ST7735_TFT_setWindow>
 80010e2:	bf00      	nop
 80010e4:	20000094 	.word	0x20000094
 80010e8:	40010800 	.word	0x40010800
 80010ec:	20000013 	.word	0x20000013
 80010f0:	2000000f 	.word	0x2000000f

080010f4 <ST7735_TFT_setOrientation>:
void ST7735_TFT_setOrientation(Orientation_t orientation){
 80010f4:	b510      	push	{r4, lr}
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <ST7735_TFT_setOrientation+0x3c>)
 80010f8:	4c0e      	ldr	r4, [pc, #56]	; (8001134 <ST7735_TFT_setOrientation+0x40>)
	if(orientation == LANDSCAPE){
 80010fa:	b990      	cbnz	r0, 8001122 <ST7735_TFT_setOrientation+0x2e>
		MADCTL_val_u.MADCTL_val_t.MV=1;
 80010fc:	7822      	ldrb	r2, [r4, #0]
		Screen_t.orienation=LANDSCAPE;
 80010fe:	7098      	strb	r0, [r3, #2]
		MADCTL_val_u.MADCTL_val_t.MV=1;
 8001100:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001104:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001108:	7022      	strb	r2, [r4, #0]
		Screen_t.width=160;
 800110a:	22a0      	movs	r2, #160	; 0xa0
 800110c:	705a      	strb	r2, [r3, #1]
		Screen_t.height=128;
 800110e:	2280      	movs	r2, #128	; 0x80
	send_command(MADCTL);
 8001110:	2036      	movs	r0, #54	; 0x36
		Screen_t.height=160;
 8001112:	701a      	strb	r2, [r3, #0]
	send_command(MADCTL);
 8001114:	f7ff ff34 	bl	8000f80 <send_command>
	send_byte(MADCTL_val_u.reg_val);
 8001118:	7820      	ldrb	r0, [r4, #0]
}
 800111a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	send_byte(MADCTL_val_u.reg_val);
 800111e:	f7ff bf13 	b.w	8000f48 <send_byte>
		MADCTL_val_u.reg_val=0;
 8001122:	2200      	movs	r2, #0
 8001124:	7022      	strb	r2, [r4, #0]
		Screen_t.orienation=LANDSCAPE;
 8001126:	709a      	strb	r2, [r3, #2]
		Screen_t.width=128;
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	705a      	strb	r2, [r3, #1]
		Screen_t.height=160;
 800112c:	22a0      	movs	r2, #160	; 0xa0
 800112e:	e7ef      	b.n	8001110 <ST7735_TFT_setOrientation+0x1c>
 8001130:	2000000c 	.word	0x2000000c
 8001134:	20000090 	.word	0x20000090

08001138 <ST7735_TFT_Paint>:
void ST7735_TFT_Paint(uint8_t x_start, uint8_t x_end, uint8_t y_start, uint8_t y_end, Colors_t color){
 8001138:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800113c:	461c      	mov	r4, r3
 800113e:	4617      	mov	r7, r2
 8001140:	4680      	mov	r8, r0
 8001142:	460d      	mov	r5, r1
 8001144:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	ST7735_TFT_setWindow(x_start, x_end, y_start, y_end);
 8001148:	f7ff ff80 	bl	800104c <ST7735_TFT_setWindow>
	send_command(RAMWR);
 800114c:	202c      	movs	r0, #44	; 0x2c
 800114e:	f7ff ff17 	bl	8000f80 <send_command>
		uint8_t buff[2]={(color>>8), color&0xFF};
 8001152:	0a33      	lsrs	r3, r6, #8
 8001154:	f88d 6005 	strb.w	r6, [sp, #5]
		RST_PIN(CS_PORT, CS);
 8001158:	4e0f      	ldr	r6, [pc, #60]	; (8001198 <ST7735_TFT_Paint+0x60>)
		uint8_t buff[2]={(color>>8), color&0xFF};
 800115a:	f88d 3004 	strb.w	r3, [sp, #4]
		RST_PIN(CS_PORT, CS);
 800115e:	68f3      	ldr	r3, [r6, #12]
		for(uint16_t i = 0; i < ((x_end-x_start)+1)*((y_end-y_start)+1); i++){
 8001160:	eba5 0508 	sub.w	r5, r5, r8
		RST_PIN(CS_PORT, CS);
 8001164:	f023 0304 	bic.w	r3, r3, #4
 8001168:	60f3      	str	r3, [r6, #12]
		for(uint16_t i = 0; i < ((x_end-x_start)+1)*((y_end-y_start)+1); i++){
 800116a:	1be3      	subs	r3, r4, r7
 800116c:	3301      	adds	r3, #1
 800116e:	fb05 3403 	mla	r4, r5, r3, r3
 8001172:	2500      	movs	r5, #0
 8001174:	b2ab      	uxth	r3, r5
 8001176:	42a3      	cmp	r3, r4
 8001178:	f105 0501 	add.w	r5, r5, #1
 800117c:	db06      	blt.n	800118c <ST7735_TFT_Paint+0x54>
		SET_PIN(CS_PORT, CS);
 800117e:	68f3      	ldr	r3, [r6, #12]
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	60f3      	str	r3, [r6, #12]
}
 8001186:	b002      	add	sp, #8
 8001188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			send_data(buff, 2);
 800118c:	2102      	movs	r1, #2
 800118e:	a801      	add	r0, sp, #4
 8001190:	f7ff ff06 	bl	8000fa0 <send_data>
		for(uint16_t i = 0; i < ((x_end-x_start)+1)*((y_end-y_start)+1); i++){
 8001194:	e7ee      	b.n	8001174 <ST7735_TFT_Paint+0x3c>
 8001196:	bf00      	nop
 8001198:	40010800 	.word	0x40010800

0800119c <ST7735_TFT_fillScreen>:
void ST7735_TFT_fillScreen(Colors_t color){
 800119c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ST7735_TFT_setWindow(0, ST7735_TFT_DEFAULT_XMAX_ADDR, 0, ST7735_TFT_DEFAULT_YMAX_ADDR);
 800119e:	2200      	movs	r2, #0
void ST7735_TFT_fillScreen(Colors_t color){
 80011a0:	4604      	mov	r4, r0
	ST7735_TFT_setWindow(0, ST7735_TFT_DEFAULT_XMAX_ADDR, 0, ST7735_TFT_DEFAULT_YMAX_ADDR);
 80011a2:	239f      	movs	r3, #159	; 0x9f
 80011a4:	4610      	mov	r0, r2
 80011a6:	217f      	movs	r1, #127	; 0x7f
 80011a8:	f7ff ff50 	bl	800104c <ST7735_TFT_setWindow>
	send_command(RAMWR);
 80011ac:	202c      	movs	r0, #44	; 0x2c
 80011ae:	f7ff fee7 	bl	8000f80 <send_command>
	uint8_t buff[2]={(color>>8), color&0xFF};
 80011b2:	0a23      	lsrs	r3, r4, #8
 80011b4:	f88d 4005 	strb.w	r4, [sp, #5]
	RST_PIN(CS_PORT, CS);
 80011b8:	f44f 44a0 	mov.w	r4, #20480	; 0x5000
 80011bc:	4d0a      	ldr	r5, [pc, #40]	; (80011e8 <ST7735_TFT_fillScreen+0x4c>)
	uint8_t buff[2]={(color>>8), color&0xFF};
 80011be:	f88d 3004 	strb.w	r3, [sp, #4]
	RST_PIN(CS_PORT, CS);
 80011c2:	68eb      	ldr	r3, [r5, #12]
 80011c4:	f023 0304 	bic.w	r3, r3, #4
 80011c8:	60eb      	str	r3, [r5, #12]
	for(uint16_t i = 0; i < ST7735_TFT_PIXEL_NUM; i++){
 80011ca:	3c01      	subs	r4, #1
		send_data(buff, 2);
 80011cc:	2102      	movs	r1, #2
 80011ce:	a801      	add	r0, sp, #4
	for(uint16_t i = 0; i < ST7735_TFT_PIXEL_NUM; i++){
 80011d0:	b2a4      	uxth	r4, r4
		send_data(buff, 2);
 80011d2:	f7ff fee5 	bl	8000fa0 <send_data>
	for(uint16_t i = 0; i < ST7735_TFT_PIXEL_NUM; i++){
 80011d6:	2c00      	cmp	r4, #0
 80011d8:	d1f7      	bne.n	80011ca <ST7735_TFT_fillScreen+0x2e>
	SET_PIN(CS_PORT, CS);
 80011da:	68eb      	ldr	r3, [r5, #12]
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	60eb      	str	r3, [r5, #12]
}
 80011e2:	b003      	add	sp, #12
 80011e4:	bd30      	pop	{r4, r5, pc}
 80011e6:	bf00      	nop
 80011e8:	40010800 	.word	0x40010800

080011ec <ST7735_TFT_writeChar>:
void ST7735_TFT_writeChar(char ch, uint8_t x_addr, uint8_t y_addr, Colors_t charColor, Colors_t backgroundColor){
 80011ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011f0:	4604      	mov	r4, r0
 80011f2:	461d      	mov	r5, r3
 80011f4:	4608      	mov	r0, r1
	ST7735_TFT_setWindow(x_addr, x_addr+7, y_addr, y_addr+7);
 80011f6:	1dd3      	adds	r3, r2, #7
 80011f8:	3107      	adds	r1, #7
 80011fa:	b2db      	uxtb	r3, r3
	RST_PIN(CS_PORT, CS);
 80011fc:	4f16      	ldr	r7, [pc, #88]	; (8001258 <ST7735_TFT_writeChar+0x6c>)
	ST7735_TFT_setWindow(x_addr, x_addr+7, y_addr, y_addr+7);
 80011fe:	b2c9      	uxtb	r1, r1
void ST7735_TFT_writeChar(char ch, uint8_t x_addr, uint8_t y_addr, Colors_t charColor, Colors_t backgroundColor){
 8001200:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	ST7735_TFT_setWindow(x_addr, x_addr+7, y_addr, y_addr+7);
 8001204:	f7ff ff22 	bl	800104c <ST7735_TFT_setWindow>
	send_command(RAMWR);
 8001208:	202c      	movs	r0, #44	; 0x2c
 800120a:	f7ff feb9 	bl	8000f80 <send_command>
	RST_PIN(CS_PORT, CS);
 800120e:	3c20      	subs	r4, #32
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <ST7735_TFT_writeChar+0x70>)
 8001214:	b2e4      	uxtb	r4, r4
 8001216:	eb02 09c4 	add.w	r9, r2, r4, lsl #3
 800121a:	f023 0304 	bic.w	r3, r3, #4
 800121e:	3208      	adds	r2, #8
 8001220:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 8; i++){
 8001222:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
void ST7735_TFT_writeChar(char ch, uint8_t x_addr, uint8_t y_addr, Colors_t charColor, Colors_t backgroundColor){
 8001226:	f04f 0807 	mov.w	r8, #7
			uint16_t val = arr[(uint8_t)(ch-0x20)][i]>>j;
 800122a:	f899 3000 	ldrb.w	r3, [r9]
 800122e:	fa43 f308 	asr.w	r3, r3, r8
			if((val&1)==1)send_pixelVal(charColor);
 8001232:	07db      	lsls	r3, r3, #31
 8001234:	bf4c      	ite	mi
 8001236:	4628      	movmi	r0, r5
			else send_pixelVal(backgroundColor);
 8001238:	4630      	movpl	r0, r6
 800123a:	f7ff febb 	bl	8000fb4 <send_pixelVal>
		for(int8_t j = 7; j >= 0; j--){
 800123e:	f1b8 0801 	subs.w	r8, r8, #1
 8001242:	d2f2      	bcs.n	800122a <ST7735_TFT_writeChar+0x3e>
	for(uint8_t i = 0; i < 8; i++){
 8001244:	f109 0901 	add.w	r9, r9, #1
 8001248:	45a1      	cmp	r9, r4
 800124a:	d1ec      	bne.n	8001226 <ST7735_TFT_writeChar+0x3a>
	SET_PIN(CS_PORT, CS);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	60fb      	str	r3, [r7, #12]
}
 8001254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001258:	40010800 	.word	0x40010800
 800125c:	080013c0 	.word	0x080013c0

08001260 <ST7735_TFT_writeString>:
void ST7735_TFT_writeString(char text[], uint8_t x_addr, uint8_t y_addr, Colors_t charColor, Colors_t backgroundColor){
 8001260:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001264:	4606      	mov	r6, r0
 8001266:	460c      	mov	r4, r1
 8001268:	4615      	mov	r5, r2
 800126a:	4698      	mov	r8, r3
	for(uint8_t i = 0; text[i] != '\0'; i++, x_addr+=8){
 800126c:	2700      	movs	r7, #0
void ST7735_TFT_writeString(char text[], uint8_t x_addr, uint8_t y_addr, Colors_t charColor, Colors_t backgroundColor){
 800126e:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
		if((x_addr+8)>Screen_t.width){
 8001272:	f8df a034 	ldr.w	sl, [pc, #52]	; 80012a8 <ST7735_TFT_writeString+0x48>
	for(uint8_t i = 0; text[i] != '\0'; i++, x_addr+=8){
 8001276:	b2fb      	uxtb	r3, r7
 8001278:	5cf0      	ldrb	r0, [r6, r3]
 800127a:	b910      	cbnz	r0, 8001282 <ST7735_TFT_writeString+0x22>
}
 800127c:	b002      	add	sp, #8
 800127e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if((x_addr+8)>Screen_t.width){
 8001282:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8001286:	1de3      	adds	r3, r4, #7
 8001288:	4293      	cmp	r3, r2
			x_addr=0;
 800128a:	bfa2      	ittt	ge
 800128c:	2400      	movge	r4, #0
			y_addr+=9;
 800128e:	3509      	addge	r5, #9
 8001290:	b2ed      	uxtbge	r5, r5
		ST7735_TFT_writeChar(text[i], x_addr, y_addr, charColor, backgroundColor);
 8001292:	4621      	mov	r1, r4
 8001294:	4643      	mov	r3, r8
 8001296:	462a      	mov	r2, r5
 8001298:	f8cd 9000 	str.w	r9, [sp]
	for(uint8_t i = 0; text[i] != '\0'; i++, x_addr+=8){
 800129c:	3408      	adds	r4, #8
		ST7735_TFT_writeChar(text[i], x_addr, y_addr, charColor, backgroundColor);
 800129e:	f7ff ffa5 	bl	80011ec <ST7735_TFT_writeChar>
	for(uint8_t i = 0; text[i] != '\0'; i++, x_addr+=8){
 80012a2:	b2e4      	uxtb	r4, r4
 80012a4:	3701      	adds	r7, #1
 80012a6:	e7e6      	b.n	8001276 <ST7735_TFT_writeString+0x16>
 80012a8:	2000000c 	.word	0x2000000c

080012ac <__libc_init_array>:
 80012ac:	b570      	push	{r4, r5, r6, lr}
 80012ae:	2600      	movs	r6, #0
 80012b0:	4d0c      	ldr	r5, [pc, #48]	; (80012e4 <__libc_init_array+0x38>)
 80012b2:	4c0d      	ldr	r4, [pc, #52]	; (80012e8 <__libc_init_array+0x3c>)
 80012b4:	1b64      	subs	r4, r4, r5
 80012b6:	10a4      	asrs	r4, r4, #2
 80012b8:	42a6      	cmp	r6, r4
 80012ba:	d109      	bne.n	80012d0 <__libc_init_array+0x24>
 80012bc:	f000 f822 	bl	8001304 <_init>
 80012c0:	2600      	movs	r6, #0
 80012c2:	4d0a      	ldr	r5, [pc, #40]	; (80012ec <__libc_init_array+0x40>)
 80012c4:	4c0a      	ldr	r4, [pc, #40]	; (80012f0 <__libc_init_array+0x44>)
 80012c6:	1b64      	subs	r4, r4, r5
 80012c8:	10a4      	asrs	r4, r4, #2
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d105      	bne.n	80012da <__libc_init_array+0x2e>
 80012ce:	bd70      	pop	{r4, r5, r6, pc}
 80012d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80012d4:	4798      	blx	r3
 80012d6:	3601      	adds	r6, #1
 80012d8:	e7ee      	b.n	80012b8 <__libc_init_array+0xc>
 80012da:	f855 3b04 	ldr.w	r3, [r5], #4
 80012de:	4798      	blx	r3
 80012e0:	3601      	adds	r6, #1
 80012e2:	e7f2      	b.n	80012ca <__libc_init_array+0x1e>
 80012e4:	080016c0 	.word	0x080016c0
 80012e8:	080016c0 	.word	0x080016c0
 80012ec:	080016c0 	.word	0x080016c0
 80012f0:	080016c4 	.word	0x080016c4

080012f4 <memset>:
 80012f4:	4603      	mov	r3, r0
 80012f6:	4402      	add	r2, r0
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d100      	bne.n	80012fe <memset+0xa>
 80012fc:	4770      	bx	lr
 80012fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001302:	e7f9      	b.n	80012f8 <memset+0x4>

08001304 <_init>:
 8001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001306:	bf00      	nop
 8001308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130a:	bc08      	pop	{r3}
 800130c:	469e      	mov	lr, r3
 800130e:	4770      	bx	lr

08001310 <_fini>:
 8001310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001312:	bf00      	nop
 8001314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001316:	bc08      	pop	{r3}
 8001318:	469e      	mov	lr, r3
 800131a:	4770      	bx	lr
